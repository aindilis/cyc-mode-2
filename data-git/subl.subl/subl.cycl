(find-or-create-constant "SubLMicrotheoryMt")
(cyc-assert '(#$isa #$SubLMicrotheoryMt #$Microtheory) #$BaseKB)
(cyc-assert '(#$genlMt #$SubLMicrotheoryMt #$BaseKB) #$BaseKB)
(find-or-create-constant "SubLFunction")
(cyc-assert '(#$isa #$SubLFunction #$Collection) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLTypePredicate")
(cyc-assert '(#$isa #$SubLTypePredicate #$Collection) #$SubLMicrotheoryMt)
(cyc-assert '(#$genls #$SubLTypePredicate #$SubLFunction) #$SubLMicrotheoryMt)
(find-or-create-constant "printedRepresentation")
(cyc-assert '(#$isa #$printedRepresentation #$BinaryPredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$arity #$printedRepresentation 2) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$printedRepresentation 1 #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$printedRepresentation 2 #$SubLString) #$SubLMicrotheoryMt)
(find-or-create-constant "subLFunctionReturnTypePredicate")
(cyc-assert '(#$isa #$subLFunctionReturnTypePredicate #$BinaryPredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$arity #$subLFunctionReturnTypePredicate 2) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionReturnTypePredicate 1 #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionReturnTypePredicate 2 #$SubLTypePredicate) #$SubLMicrotheoryMt)
(find-or-create-constant "subLFunctionArgumentTypePredicate")
(cyc-assert '(#$isa #$subLFunctionArgumentTypePredicate #$TernaryPredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$arity #$subLFunctionArgumentTypePredicate 3) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionArgumentTypePredicate 1 #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionArgumentTypePredicate 2 #$SubLPositiveInteger) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionArgumentTypePredicate 3 #$SubLTypePredicate) #$SubLMicrotheoryMt)
(find-or-create-constant "subLFunctionOptionalArgument")
(cyc-assert '(#$isa #$subLFunctionOptionalArgument #$BinaryPredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$arity #$subLFunctionOptionalArgument 2) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionOptionalArgument 1 #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$argIsa #$subLFunctionOptionalArgument 2 #$SubLPositiveInteger) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CONSTANT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-P " Return T iff the argument is a CycL constant ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-EXTERNAL-ID")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-EXTERNAL-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-EXTERNAL-ID "CONSTANT-EXTERNAL-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-EXTERNAL-ID " Return the external id of CONSTANT. Single value returned satisfies CONSTANT-EXTERNAL-ID-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-EXTERNAL-ID 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-INTERNAL-ID")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-INTERNAL-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-INTERNAL-ID "CONSTANT-INTERNAL-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-INTERNAL-ID " Return the internal id of CONSTANT. Single value returned satisfies CONSTANT-INTERNAL-ID-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-INTERNAL-ID 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-NAME")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-NAME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-NAME "CONSTANT-NAME") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-NAME " Return the name of CONSTANT or :unnamed. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-NAME 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-CONSTANT")
(cyc-assert '(#$isa #$SubLFunction-FIND-CONSTANT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-CONSTANT "FIND-CONSTANT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-CONSTANT " Return the constant with NAME, or NIL if not present. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-CONSTANT 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-CONSTANT-BY-EXTERNAL-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-CONSTANT-BY-EXTERNAL-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-CONSTANT-BY-EXTERNAL-ID "FIND-CONSTANT-BY-EXTERNAL-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-CONSTANT-BY-EXTERNAL-ID " Return the constant with EXTERNAL-ID, or NIL if not present. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-EXTERNAL-ID-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-EXTERNAL-ID-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-CONSTANT-BY-EXTERNAL-ID 1 #$SubLFunction-CONSTANT-EXTERNAL-ID-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-EXTERNAL-ID-P "CONSTANT-EXTERNAL-ID-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-CONSTANT-BY-INTERNAL-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-CONSTANT-BY-INTERNAL-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-CONSTANT-BY-INTERNAL-ID "FIND-CONSTANT-BY-INTERNAL-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-CONSTANT-BY-INTERNAL-ID " Return the constant with internal ID, or NIL if not present. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-INTERNAL-ID-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-INTERNAL-ID-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-CONSTANT-BY-INTERNAL-ID 1 #$SubLFunction-CONSTANT-INTERNAL-ID-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-INTERNAL-ID-P "CONSTANT-INTERNAL-ID-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CREATE-CONSTANT")
(cyc-assert '(#$isa #$SubLFunction-CREATE-CONSTANT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CREATE-CONSTANT "CREATE-CONSTANT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CREATE-CONSTANT #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CREATE-CONSTANT " Return a new constant named NAME. Use EXTERNAL-ID if non-null, else create a new ID. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-OR-CREATE-CONSTANT")
(cyc-assert '(#$isa #$SubLFunction-FIND-OR-CREATE-CONSTANT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-OR-CREATE-CONSTANT "FIND-OR-CREATE-CONSTANT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FIND-OR-CREATE-CONSTANT #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-OR-CREATE-CONSTANT " Return the constant with NAME if it exists, otherwise create it with EXTERNAL-ID. Also, if it exists but has a null id, install EXTERNAL-ID on the constant. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-OR-CREATE-CONSTANT 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RENAME-CONSTANT")
(cyc-assert '(#$isa #$SubLFunction-RENAME-CONSTANT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RENAME-CONSTANT "RENAME-CONSTANT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RENAME-CONSTANT #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RENAME-CONSTANT " Rename CONSTANT to have NEW-NAME as its name. The constant is returned. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-RENAME-CONSTANT 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-RENAME-CONSTANT 2 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNIQUIFY-CONSTANT-NAME")
(cyc-assert '(#$isa #$SubLFunction-UNIQUIFY-CONSTANT-NAME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNIQUIFY-CONSTANT-NAME "UNIQUIFY-CONSTANT-NAME") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNIQUIFY-CONSTANT-NAME #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNIQUIFY-CONSTANT-NAME " Return a unique, currently unused constant name based on NAME, which must be a valid constant name. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNIQUIFY-CONSTANT-NAME 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REMOVE-CONSTANT")
(cyc-assert '(#$isa #$SubLFunction-REMOVE-CONSTANT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REMOVE-CONSTANT "REMOVE-CONSTANT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REMOVE-CONSTANT #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REMOVE-CONSTANT " Remove constant from the KB. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-REMOVE-CONSTANT 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-COUNT")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-COUNT "CONSTANT-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CONSTANT-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-COUNT " Return the total number of constants. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-VALID-CONSTANT-NAME-CHAR")
(cyc-assert '(#$isa #$SubLFunction-VALID-CONSTANT-NAME-CHAR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VALID-CONSTANT-NAME-CHAR "VALID-CONSTANT-NAME-CHAR") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-VALID-CONSTANT-NAME-CHAR #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-VALID-CONSTANT-NAME-CHAR " Return T iff CHAR is a character which is allowed in a valid constant name. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CHARACTERP")
(cyc-assert '(#$isa #$SubLFunction-CHARACTERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-VALID-CONSTANT-NAME-CHAR 1 #$SubLFunction-CHARACTERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CHARACTERP "CHARACTERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-VALID-CONSTANT-NAME")
(cyc-assert '(#$isa #$SubLFunction-VALID-CONSTANT-NAME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VALID-CONSTANT-NAME "VALID-CONSTANT-NAME") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-VALID-CONSTANT-NAME #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-VALID-CONSTANT-NAME " Return T iff STRING is a valid name for a constant. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-COMPLETE-EXACT")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-COMPLETE-EXACT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-COMPLETE-EXACT "CONSTANT-COMPLETE-EXACT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-COMPLETE-EXACT " Return a valid constant whose name exactly matches STRING. Optionally the START and END character positions can be specified, such that the STRING matches characters between the START and END range. If no constant exists, return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE-EXACT 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FIXNUMP")
(cyc-assert '(#$isa #$SubLFunction-FIXNUMP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE-EXACT 2 #$SubLFunction-FIXNUMP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIXNUMP "FIXNUMP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-COMPLETE-EXACT 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-COMPLETE")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-COMPLETE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-COMPLETE "CONSTANT-COMPLETE") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-COMPLETE " Return all valid constants with PREFIX as a prefix of their name When CASE-SENSITIVE? is non-nil, the comparison is done in a case-sensitive fashion. When EXACT-LENGTH? is non-nil, the prefix must be the entire string Optionally the START and END character positions can be specified, such that the PREFIX matches characters between the START and END range. If no constant exists, return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FIXNUMP")
(cyc-assert '(#$isa #$SubLFunction-FIXNUMP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE 4 #$SubLFunction-FIXNUMP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIXNUMP "FIXNUMP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-COMPLETE 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE 3 #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BOOLEANP "BOOLEANP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-COMPLETE 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-COMPLETE 2 #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BOOLEANP "BOOLEANP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-COMPLETE 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CONSTANT-APROPOS")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-APROPOS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-APROPOS "CONSTANT-APROPOS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CONSTANT-APROPOS " Return all valid constants with SUBSTRING somewhere in their name When CASE-SENSITIVE? is non-nil, the comparison is done in a case-sensitive fashion. Optionally the START and END character positions can be specified, such that the SUBSTRING matches characters between the START and END range. If no constant exists, return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-APROPOS 1 #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-STRINGP "STRINGP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FIXNUMP")
(cyc-assert '(#$isa #$SubLFunction-FIXNUMP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-APROPOS 3 #$SubLFunction-FIXNUMP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIXNUMP "FIXNUMP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-APROPOS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CONSTANT-APROPOS 2 #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BOOLEANP "BOOLEANP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CONSTANT-APROPOS 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NART-P")
(cyc-assert '(#$isa #$SubLFunction-NART-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-P "NART-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NART-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NART-P " Return T iff OBJECT is a datastructure implementing a non-atomic reified term (NART). ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NART-ID")
(cyc-assert '(#$isa #$SubLFunction-NART-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-ID "NART-ID") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NART-ID #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NART-ID " Return the id of this NART. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NART-P")
(cyc-assert '(#$isa #$SubLFunction-NART-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NART-ID 1 #$SubLFunction-NART-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-P "NART-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-NART-BY-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-NART-BY-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-NART-BY-ID "FIND-NART-BY-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-NART-BY-ID " Return the NART with ID, or NIL if not present. Single value returned satisfies NART-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-NART-BY-ID 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NART-HL-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-NART-HL-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-HL-FORMULA "NART-HL-FORMULA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NART-HL-FORMULA " Return the hl formula of this NART. Single value returned satisfies CONSP or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NART-P")
(cyc-assert '(#$isa #$SubLFunction-NART-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NART-HL-FORMULA 1 #$SubLFunction-NART-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-P "NART-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NART-EL-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-NART-EL-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-EL-FORMULA "NART-EL-FORMULA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NART-EL-FORMULA " Return the el formula of this NART. Single value returned satisfies CONSP or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NART-P")
(cyc-assert '(#$isa #$SubLFunction-NART-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NART-EL-FORMULA 1 #$SubLFunction-NART-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-P "NART-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REMOVE-NART")
(cyc-assert '(#$isa #$SubLFunction-REMOVE-NART #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REMOVE-NART "REMOVE-NART") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REMOVE-NART #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REMOVE-NART " Remove NART from the KB. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NART-P")
(cyc-assert '(#$isa #$SubLFunction-NART-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-REMOVE-NART 1 #$SubLFunction-NART-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-P "NART-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NART-COUNT")
(cyc-assert '(#$isa #$SubLFunction-NART-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NART-COUNT "NART-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NART-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NART-COUNT " Return the total number of NARTs. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FORT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FORT-P " Return T iff OBJECT is a first order reified term (FORT). ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-FORT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-FORT-P " Returns t iff OBJECT is a fort or an EL formula. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FORT-EL-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-FORT-EL-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-EL-FORMULA "FORT-EL-FORMULA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FORT-EL-FORMULA " Return the EL formula for any FORT. Single value returned satisfies CONSP or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FORT-EL-FORMULA 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REMOVE-FORT")
(cyc-assert '(#$isa #$SubLFunction-REMOVE-FORT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REMOVE-FORT "REMOVE-FORT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REMOVE-FORT #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REMOVE-FORT " Remove FORT from the KB. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-REMOVE-FORT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FORT-COUNT")
(cyc-assert '(#$isa #$SubLFunction-FORT-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-COUNT "FORT-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FORT-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FORT-COUNT " Return the total number of FORTs. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-P " Return T iff OBJECT is an HL assertion ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-ID")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-ID "ASSERTION-ID") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-ID #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-ID " Return the id of this ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-ID 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-CNF")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-CNF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-CNF "ASSERTION-CNF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-CNF #$SubLFunction-CNF-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-CNF " Return the cnf of ASSERTION. @note If you know the assertion is a gaf, consider using gaf-formula instead, if you do not explicitly need a CNF. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-CNF 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-FORMULA "ASSERTION-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-FORMULA #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-FORMULA " Return a formula for ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-FORMULA 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-IST-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-IST-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-IST-FORMULA "ASSERTION-IST-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-IST-FORMULA #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-IST-FORMULA " Return a formula in #$ist format for ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-IST-FORMULA 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-MENTIONS-TERM")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-MENTIONS-TERM #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-MENTIONS-TERM "ASSERTION-MENTIONS-TERM") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-MENTIONS-TERM #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-MENTIONS-TERM " Return T iff ASSERTION's formula or mt contains TERM. If assertion is a meta-assertion, recurse down sub-assertions. By convention, negated gafs do not necessarily mention the term #$not. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-MENTIONS-TERM 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-MENTIONS-TERM 2 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-MT")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-MT "ASSERTION-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-MT #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-MT " Return the mt of ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-MT 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-DIRECTION")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-DIRECTION #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-DIRECTION "ASSERTION-DIRECTION") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-DIRECTION-P")
(cyc-assert '(#$isa #$SubLFunction-DIRECTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-DIRECTION #$SubLFunction-DIRECTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-DIRECTION " Return the direction of ASSERTION (either :backward, :forward or :code). ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-DIRECTION 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FORWARD-ASSERTIONqm")
(cyc-assert '(#$isa #$SubLFunction-FORWARD-ASSERTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORWARD-ASSERTIONqm "FORWARD-ASSERTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FORWARD-ASSERTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FORWARD-ASSERTIONqm " Predicate returns T iff ASSERTION's direction is :FORWARD. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-BACKWARD-ASSERTIONqm")
(cyc-assert '(#$isa #$SubLFunction-BACKWARD-ASSERTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BACKWARD-ASSERTIONqm "BACKWARD-ASSERTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-BACKWARD-ASSERTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-BACKWARD-ASSERTIONqm " Predicate returns T iff ASSERTION's direction is :BACKWARD. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DIRECTION-P")
(cyc-assert '(#$isa #$SubLFunction-DIRECTION-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DIRECTION-P "DIRECTION-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DIRECTION-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DIRECTION-P " Return T iff OBJECT is a valid assertion inference direction :backward :forward or :code. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CODE-ASSERTIONqm")
(cyc-assert '(#$isa #$SubLFunction-CODE-ASSERTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CODE-ASSERTIONqm "CODE-ASSERTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CODE-ASSERTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CODE-ASSERTIONqm " Predicate returns T iff ASSERTION's direction is :CODE. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-TRUTH")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-TRUTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-TRUTH "ASSERTION-TRUTH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-TRUTH #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-TRUTH " Return the current truth of ASSERTION -- either :true :false or :unknown. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-TRUTH 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-HAS-TRUTH")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-HAS-TRUTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-HAS-TRUTH "ASSERTION-HAS-TRUTH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-HAS-TRUTH #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-HAS-TRUTH " Return T iff ASSERTION's current truth is TRUTH. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-HAS-TRUTH 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-HAS-TRUTH 2 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-TRUTH-P " Returns T iff OBJECT is a valid CycL truth :true :false or :unknown. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-STRENGTH")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-STRENGTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-STRENGTH "ASSERTION-STRENGTH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-STRENGTH-P")
(cyc-assert '(#$isa #$SubLFunction-EL-STRENGTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-STRENGTH #$SubLFunction-EL-STRENGTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-STRENGTH " Return the current argumentation strength of ASSERTION -- either :monotonic :default or :unknown. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-STRENGTH 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm "ASSERTION-HAS-META-ASSERTIONS?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm " Return T iff ASSERTION has some meta-assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-HAS-META-ASSERTIONSqm 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-ASSERTION-BY-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-ASSERTION-BY-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-ASSERTION-BY-ID "FIND-ASSERTION-BY-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-ASSERTION-BY-ID " Return the assertion with ID, or NIL if not present. Single value returned satisfies ASSERTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ASSERTION-BY-ID 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-ASSERTION")
(cyc-assert '(#$isa #$SubLFunction-FIND-ASSERTION #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-ASSERTION "FIND-ASSERTION") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-ASSERTION " Find the assertion in MT with CNF. Return NIL if not present. Single value returned satisfies ASSERTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ASSERTION 1 #$SubLFunction-CNF-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-P "CNF-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ASSERTION 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-ASSERTION-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-FIND-ASSERTION-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-ASSERTION-ANY-MT "FIND-ASSERTION-ANY-MT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-ASSERTION-ANY-MT " Find any assertion in any mt with CNF. Return NIL if none are present. Single value returned satisfies ASSERTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ASSERTION-ANY-MT 1 #$SubLFunction-CNF-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-P "CNF-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-ALL-ASSERTIONS")
(cyc-assert '(#$isa #$SubLFunction-FIND-ALL-ASSERTIONS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-ALL-ASSERTIONS "FIND-ALL-ASSERTIONS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-ALL-ASSERTIONS " Return all assertions that have CNF or NIL if there aren't any. Single value returned satisfies (LIST ASSERTION-P) or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ALL-ASSERTIONS 1 #$SubLFunction-CNF-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-P "CNF-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-GAF")
(cyc-assert '(#$isa #$SubLFunction-FIND-GAF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-GAF "FIND-GAF") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-GAF " Find the assertion in MT with GAF as its formula. Return NIL if not present. Single value returned satisfies ASSERTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-GAF 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-GAF 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-GAF-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-FIND-GAF-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-GAF-ANY-MT "FIND-GAF-ANY-MT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-GAF-ANY-MT " Find any assertion in any mt with GAF as its formula. Return NIL if not present. Single value returned satisfies ASSERTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-GAF-ANY-MT 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-ALL-GAFS")
(cyc-assert '(#$isa #$SubLFunction-FIND-ALL-GAFS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-ALL-GAFS "FIND-ALL-GAFS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-ALL-GAFS " Return all assertions of GAF or NIL if there aren't any. Single value returned satisfies (LIST ASSERTION-P) or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-ALL-GAFS 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GET-ASSERTED-ARGUMENT")
(cyc-assert '(#$isa #$SubLFunction-GET-ASSERTED-ARGUMENT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GET-ASSERTED-ARGUMENT "GET-ASSERTED-ARGUMENT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GET-ASSERTED-ARGUMENT " Return the asserted argument for ASSERTION, or nil if none present. Single value returned satisfies ASSERTED-ARGUMENT-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GET-ASSERTED-ARGUMENT 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTED-ASSERTIONqm")
(cyc-assert '(#$isa #$SubLFunction-ASSERTED-ASSERTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTED-ASSERTIONqm "ASSERTED-ASSERTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTED-ASSERTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTED-ASSERTIONqm " Return non-nil IFF assertion has an asserted argument. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTED-ASSERTIONqm 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEDUCED-ASSERTIONqm")
(cyc-assert '(#$isa #$SubLFunction-DEDUCED-ASSERTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCED-ASSERTIONqm "DEDUCED-ASSERTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEDUCED-ASSERTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEDUCED-ASSERTIONqm " Return non-nil IFF assertion has some deduced argument ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DEDUCED-ASSERTIONqm 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-EL-IST-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-EL-IST-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-EL-IST-FORMULA "ASSERTION-EL-IST-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSP")
(cyc-assert '(#$isa #$SubLFunction-CONSP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-EL-IST-FORMULA #$SubLFunction-CONSP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-EL-IST-FORMULA " Return the el formula in #$ist format for ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-EL-IST-FORMULA 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-HAS-DEPENDENTS-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-HAS-DEPENDENTS-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-HAS-DEPENDENTS-P "ASSERTION-HAS-DEPENDENTS-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-HAS-DEPENDENTS-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-HAS-DEPENDENTS-P " Return non-nil IFF assertion has dependents. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-HAS-DEPENDENTS-P 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-COUNT")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-COUNT "ASSERTION-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-COUNT " Return the total number of assertions. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NEGATEDqm")
(cyc-assert '(#$isa #$SubLFunction-NEGATEDqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEGATEDqm "NEGATED?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NEGATEDqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NEGATEDqm " Assuming FORM is a valid CycL formula, return T IFF it is negated. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NEGATEDqm 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NEGATE")
(cyc-assert '(#$isa #$SubLFunction-NEGATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEGATE "NEGATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NEGATE #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NEGATE " Assuming FORM is a valid CycL formula, return a negated version of it. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NEGATE 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CLAUSE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CLAUSE-P " Returns T iff OBJECT is either a CNF or DNF clause. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SENSE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SENSE-P " Return T iff OBJECT is a valid CycL literal sense :neg or :pos. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAKE-CLAUSE")
(cyc-assert '(#$isa #$SubLFunction-MAKE-CLAUSE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAKE-CLAUSE "MAKE-CLAUSE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAKE-CLAUSE #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAKE-CLAUSE " Construct a clause from NEG-LITS and POS-LITS, each of which are lists of literals. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-CLAUSE 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-CLAUSE 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NEG-LITS")
(cyc-assert '(#$isa #$SubLFunction-NEG-LITS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEG-LITS "NEG-LITS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NEG-LITS #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NEG-LITS " Return the neg-lits of CLAUSE. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NEG-LITS 1 #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-POS-LITS")
(cyc-assert '(#$isa #$SubLFunction-POS-LITS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POS-LITS "POS-LITS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-POS-LITS #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-POS-LITS " Return the pos-lits of CLAUSE. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-POS-LITS 1 #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CLAUSE-EQUAL")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-EQUAL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-EQUAL "CLAUSE-EQUAL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CLAUSE-EQUAL #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CLAUSE-EQUAL " Return T iff CLAUSE1 and CLAUSE2 are both equivalent clauses. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EMPTY-CLAUSE")
(cyc-assert '(#$isa #$SubLFunction-EMPTY-CLAUSE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EMPTY-CLAUSE "EMPTY-CLAUSE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EMPTY-CLAUSE #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EMPTY-CLAUSE " Return the empty clause. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EMPTY-CLAUSEqm")
(cyc-assert '(#$isa #$SubLFunction-EMPTY-CLAUSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EMPTY-CLAUSEqm "EMPTY-CLAUSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EMPTY-CLAUSEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EMPTY-CLAUSEqm " Return T iff CLAUSE is empty. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-EMPTY-CLAUSEqm 1 #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CLAUSE-LITERAL")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-LITERAL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-LITERAL "CLAUSE-LITERAL") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CLAUSE-LITERAL " Return literal in CLAUSE specified by SENSE and NUM. SENSE must be either :pos or :neg. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-LITERAL 1 #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-LITERAL 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-LITERAL 2 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CLAUSE-WITHOUT-LITERAL")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-WITHOUT-LITERAL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-WITHOUT-LITERAL "CLAUSE-WITHOUT-LITERAL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CLAUSE-WITHOUT-LITERAL #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CLAUSE-WITHOUT-LITERAL " Return a new clause which is CLAUSE without the literal specified by SENSE and NUM. SENSE must be either :pos or :neg. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-CLAUSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-WITHOUT-LITERAL 1 #$SubLFunction-CLAUSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CLAUSE-P "CLAUSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-WITHOUT-LITERAL 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CLAUSE-WITHOUT-LITERAL 2 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GROUND-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-GROUND-CLAUSE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GROUND-CLAUSE-P "GROUND-CLAUSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GROUND-CLAUSE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GROUND-CLAUSE-P " Return T iff CLAUSE is a ground clause. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-P "CNF-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CNF-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CNF-P " Returns T iff OBJECT is a canonicalized CycL formula in conjunctive normal form. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GAF-CNFqm")
(cyc-assert '(#$isa #$SubLFunction-GAF-CNFqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GAF-CNFqm "GAF-CNF?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GAF-CNFqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GAF-CNFqm " Return T iff CNF is a cnf representation of a gaf formula. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CNF-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-CNF-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-FORMULA "CNF-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CNF-FORMULA #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CNF-FORMULA " Return a readable formula of CNF TRUTH only gets looked at for ground, single pos lit cnfs in which case TRUTH gives the truth of the gaf. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CNF-P")
(cyc-assert '(#$isa #$SubLFunction-CNF-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CNF-FORMULA 1 #$SubLFunction-CNF-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-P "CNF-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CNF-FORMULA 2 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CNF-FORMULA 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CNF-FORMULA-FROM-CLAUSES")
(cyc-assert '(#$isa #$SubLFunction-CNF-FORMULA-FROM-CLAUSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CNF-FORMULA-FROM-CLAUSES "CNF-FORMULA-FROM-CLAUSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CNF-FORMULA-FROM-CLAUSES #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CNF-FORMULA-FROM-CLAUSES " Return a readable formula from a list of CNF-CLAUSES. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CNF-FORMULA-FROM-CLAUSES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DNF-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-DNF-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DNF-FORMULA "DNF-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DNF-FORMULA #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DNF-FORMULA " Return a readable formula of DNF. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DNF-FORMULA-FROM-CLAUSES")
(cyc-assert '(#$isa #$SubLFunction-DNF-FORMULA-FROM-CLAUSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DNF-FORMULA-FROM-CLAUSES "DNF-FORMULA-FROM-CLAUSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DNF-FORMULA-FROM-CLAUSES #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DNF-FORMULA-FROM-CLAUSES " Return a readable formula from a list of DNF-CLAUSES. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DNF-FORMULA-FROM-CLAUSES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ATOMIC-CLAUSE-P")
(cyc-assert '(#$isa #$SubLFunction-ATOMIC-CLAUSE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ATOMIC-CLAUSE-P "ATOMIC-CLAUSE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ATOMIC-CLAUSE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ATOMIC-CLAUSE-P " Return T iff CLAUSE is an atomic clause. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-HL-TERM-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-HL-TERM-P " Returns T if the OBJ is a valid CycL HL term. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-HL-MODULE-P")
(cyc-assert '(#$isa #$SubLFunction-HL-MODULE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-MODULE-P "HL-MODULE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-HL-MODULE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-HL-MODULE-P " Return T iff OBJECT is an HL module. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGUMENT-P")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-P "ARGUMENT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGUMENT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGUMENT-P " Return T iff OBJECT is an HL argument structure. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTED-ARGUMENT-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTED-ARGUMENT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTED-ARGUMENT-P "ASSERTED-ARGUMENT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTED-ARGUMENT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTED-ARGUMENT-P " Return T iff OBJECT is an HL asserted argument structure. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGUMENT-EQUAL")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-EQUAL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-EQUAL "ARGUMENT-EQUAL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGUMENT-EQUAL #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGUMENT-EQUAL " Return T iff ARGUMENT1 and ARGUMENT2 are equivalent arguments. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGUMENT-TRUTH")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-TRUTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-TRUTH "ARGUMENT-TRUTH") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGUMENT-TRUTH " Return the truth of ARGUMENT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ARGUMENT-P")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGUMENT-TRUTH 1 #$SubLFunction-ARGUMENT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-P "ARGUMENT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGUMENT-STRENGTH")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-STRENGTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-STRENGTH "ARGUMENT-STRENGTH") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGUMENT-STRENGTH " Return the strength of ARGUMENT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ARGUMENT-P")
(cyc-assert '(#$isa #$SubLFunction-ARGUMENT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGUMENT-STRENGTH 1 #$SubLFunction-ARGUMENT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGUMENT-P "ARGUMENT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEDUCTION-P")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-P "DEDUCTION-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEDUCTION-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEDUCTION-P " Return T iff OBJECT is a CycL deduction. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEDUCTION-ID")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-ID "DEDUCTION-ID") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEDUCTION-ID #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEDUCTION-ID " Return the id of DEDUCTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-DEDUCTION-P")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DEDUCTION-ID 1 #$SubLFunction-DEDUCTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-P "DEDUCTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-DEDUCTION-BY-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-DEDUCTION-BY-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-DEDUCTION-BY-ID "FIND-DEDUCTION-BY-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-DEDUCTION-BY-ID " Return the deduction with ID, or NIL if not present. Single value returned satisfies DEDUCTION-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-DEDUCTION-BY-ID 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEDUCTION-ASSERTION")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-ASSERTION #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-ASSERTION "DEDUCTION-ASSERTION") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEDUCTION-ASSERTION #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEDUCTION-ASSERTION " Return the assertion for which DEDUCTION is a deduction. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-DEDUCTION-P")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DEDUCTION-ASSERTION 1 #$SubLFunction-DEDUCTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-P "DEDUCTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEDUCTION-COUNT")
(cyc-assert '(#$isa #$SubLFunction-DEDUCTION-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEDUCTION-COUNT "DEDUCTION-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEDUCTION-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEDUCTION-COUNT " Return the total number of deductions. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-P " Return T iff OBJECT can be a support in an argument. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-MODULE")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-MODULE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-MODULE "SUPPORT-MODULE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-MODULE-P")
(cyc-assert '(#$isa #$SubLFunction-HL-MODULE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-MODULE #$SubLFunction-HL-MODULE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-MODULE " Return the module of SUPPORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SUPPORT-MODULE 1 #$SubLFunction-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-MT")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-MT "SUPPORT-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-MT #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-MT " Return the microtheory of SUPPORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SUPPORT-MT 1 #$SubLFunction-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-TRUTH")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-TRUTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-TRUTH "SUPPORT-TRUTH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-TRUTH #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-TRUTH " Return the truth of SUPPORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SUPPORT-TRUTH 1 #$SubLFunction-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-STRENGTH")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-STRENGTH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-STRENGTH "SUPPORT-STRENGTH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-STRENGTH-P")
(cyc-assert '(#$isa #$SubLFunction-EL-STRENGTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-STRENGTH #$SubLFunction-EL-STRENGTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-STRENGTH " Return the strength of SUPPORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SUPPORT-STRENGTH 1 #$SubLFunction-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUPPORT-SENTENCE")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-SENTENCE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-SENTENCE "SUPPORT-SENTENCE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSP")
(cyc-assert '(#$isa #$SubLFunction-CONSP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUPPORT-SENTENCE #$SubLFunction-CONSP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUPPORT-SENTENCE " Return the sentence of SUPPORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SUPPORT-SENTENCE 1 #$SubLFunction-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUPPORT-P "SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-HL-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-HL-SUPPORT-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-SUPPORT-P "HL-SUPPORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-HL-SUPPORT-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-HL-SUPPORT-P " Does OBJECT represent an HL support? ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAKE-HL-SUPPORT")
(cyc-assert '(#$isa #$SubLFunction-MAKE-HL-SUPPORT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAKE-HL-SUPPORT "MAKE-HL-SUPPORT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-HL-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAKE-HL-SUPPORT #$SubLFunction-HL-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAKE-HL-SUPPORT " Construct a new HL support. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TV-P")
(cyc-assert '(#$isa #$SubLFunction-TV-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-HL-SUPPORT 4 #$SubLFunction-TV-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TV-P "TV-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-MAKE-HL-SUPPORT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-MODULE-P")
(cyc-assert '(#$isa #$SubLFunction-HL-MODULE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-HL-SUPPORT 1 #$SubLFunction-HL-MODULE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-MODULE-P "HL-MODULE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-HL-SUPPORT 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-MAKE-HL-SUPPORT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAKE-HL-SUPPORT 2 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-VARqm")
(cyc-assert '(#$isa #$SubLFunction-EL-VARqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-VARqm "EL-VAR?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-VARqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-VARqm " Return T iff OBJECT is a symbol which can be interpreted as an EL variable. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-VARIABLE-P")
(cyc-assert '(#$isa #$SubLFunction-VARIABLE-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VARIABLE-P "VARIABLE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-VARIABLE-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-VARIABLE-P " Return T iff OBJECT is an HL variable. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FIND-VARIABLE-BY-ID")
(cyc-assert '(#$isa #$SubLFunction-FIND-VARIABLE-BY-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FIND-VARIABLE-BY-ID "FIND-VARIABLE-BY-ID") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FIND-VARIABLE-BY-ID " Return the HL variable with ID, or NIL if not present. Single value returned satisfies VARIABLE-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FIND-VARIABLE-BY-ID 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-VARIABLE-ID")
(cyc-assert '(#$isa #$SubLFunction-VARIABLE-ID #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VARIABLE-ID "VARIABLE-ID") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-VARIABLE-ID #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-VARIABLE-ID " Return id of HL variable VARIABLE. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-VARIABLE-P")
(cyc-assert '(#$isa #$SubLFunction-VARIABLE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-VARIABLE-ID 1 #$SubLFunction-VARIABLE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VARIABLE-P "VARIABLE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEFAULT-EL-VAR-FOR-HL-VAR")
(cyc-assert '(#$isa #$SubLFunction-DEFAULT-EL-VAR-FOR-HL-VAR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEFAULT-EL-VAR-FOR-HL-VAR "DEFAULT-EL-VAR-FOR-HL-VAR") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEFAULT-EL-VAR-FOR-HL-VAR " Return a readable EL var from HL var VARIABLE. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-VARIABLE-P")
(cyc-assert '(#$isa #$SubLFunction-VARIABLE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DEFAULT-EL-VAR-FOR-HL-VAR 1 #$SubLFunction-VARIABLE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VARIABLE-P "VARIABLE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FULLY-BOUND-P")
(cyc-assert '(#$isa #$SubLFunction-FULLY-BOUND-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FULLY-BOUND-P "FULLY-BOUND-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FULLY-BOUND-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FULLY-BOUND-P " Return T iff OBJECT contains no HL variables, and therefore is fully bound. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-VARIABLE-COUNT")
(cyc-assert '(#$isa #$SubLFunction-VARIABLE-COUNT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VARIABLE-COUNT "VARIABLE-COUNT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-VARIABLE-COUNT #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-VARIABLE-COUNT " Return the total number of HL variables. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-INDEXED-TERM-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-INDEXED-TERM-P " Returns T iff OBJECT is an indexed CycL term, i.e. a fort or an assertion. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REMOVE-TERM-INDICES")
(cyc-assert '(#$isa #$SubLFunction-REMOVE-TERM-INDICES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REMOVE-TERM-INDICES "REMOVE-TERM-INDICES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REMOVE-TERM-INDICES #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REMOVE-TERM-INDICES " Remove all assertions about TERM from the KB. Return the TERM. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-EXCEPTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-EXCEPTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-EXCEPTION-RULE-INDEX "KEY-EXCEPTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-EXCEPTION-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-EXCEPTION-RULE-INDEX " Return a list of the keys to the next index level below RULE MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-FUNCTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-FUNCTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-FUNCTION-RULE-INDEX "KEY-FUNCTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-FUNCTION-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-FUNCTION-RULE-INDEX " Return a list of the keys to the next index level below FUNC MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-GAF-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-GAF-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-GAF-ARG-INDEX "KEY-GAF-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-GAF-ARG-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-GAF-ARG-INDEX " Return a list of the keys to the next index level below TERM ARGNUM PRED. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-GENL-MT-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-GENL-MT-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-GENL-MT-RULE-INDEX "KEY-GENL-MT-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-GENL-MT-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-GENL-MT-RULE-INDEX " Return a list of the keys to the next index level below COL SENSE MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-GENLS-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-GENLS-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-GENLS-RULE-INDEX "KEY-GENLS-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-GENLS-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-GENLS-RULE-INDEX " Return a list of the keys to the next index level below COL SENSE MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-ISA-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-ISA-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-ISA-RULE-INDEX "KEY-ISA-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-ISA-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-ISA-RULE-INDEX " Return a list of the keys to the next index level below COL SENSE MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-NART-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-NART-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-NART-ARG-INDEX "KEY-NART-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-NART-ARG-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-NART-ARG-INDEX " Return a list of the keys to the next index level below TERM ARGNUM FUNC. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-PREDICATE-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-PREDICATE-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-PREDICATE-EXTENT-INDEX "KEY-PREDICATE-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-PREDICATE-EXTENT-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-PREDICATE-EXTENT-INDEX " Return a list of the keys to the next predicate-extent index level below PRED. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-KEY-PREDICATE-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-KEY-PREDICATE-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-KEY-PREDICATE-RULE-INDEX "KEY-PREDICATE-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-KEY-PREDICATE-RULE-INDEX #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-KEY-PREDICATE-RULE-INDEX " Return a list of the keys to the next index level below PRED SENSE MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-EXCEPTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-EXCEPTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-EXCEPTION-RULE-INDEX "NUM-EXCEPTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-EXCEPTION-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-EXCEPTION-RULE-INDEX " Return the raw assertion count at RULE MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-FUNCTION-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-FUNCTION-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-FUNCTION-EXTENT-INDEX "NUM-FUNCTION-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-FUNCTION-EXTENT-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-FUNCTION-EXTENT-INDEX " Return the function extent of FUNC. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-FUNCTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-FUNCTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-FUNCTION-RULE-INDEX "NUM-FUNCTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-FUNCTION-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-FUNCTION-RULE-INDEX " Return the raw assertion count at FUNC MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-GAF-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-GAF-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-GAF-ARG-INDEX "NUM-GAF-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-GAF-ARG-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-GAF-ARG-INDEX " Return the number of gafs indexed off of TERM ARGNUM PRED MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-GENL-MT-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-GENL-MT-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-GENL-MT-RULE-INDEX "NUM-GENL-MT-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-GENL-MT-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-GENL-MT-RULE-INDEX " Return the raw assertion count at COL SENSE MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-GENLS-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-GENLS-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-GENLS-RULE-INDEX "NUM-GENLS-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-GENLS-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-GENLS-RULE-INDEX " Return the raw assertion count at COL SENSE MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-INDEX "NUM-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-INDEX " The total number of assertions indexed from TERM. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-ISA-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-ISA-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-ISA-RULE-INDEX "NUM-ISA-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-ISA-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-ISA-RULE-INDEX " Return the raw assertion count at COL SENSE MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-MT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-MT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-MT-INDEX "NUM-MT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-MT-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-MT-INDEX " Return the number of assertions at the mt index for TERM. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-NART-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-NART-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-NART-ARG-INDEX "NUM-NART-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-NART-ARG-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-NART-ARG-INDEX " Return the number of #$termOfUnit gafs indexed off of TERM ARGNUM FUNC. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-OTHER-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-OTHER-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-OTHER-INDEX "NUM-OTHER-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-OTHER-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-OTHER-INDEX " Return the number of assertions at the other index for TERM. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-PREDICATE-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-PREDICATE-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-PREDICATE-EXTENT-INDEX "NUM-PREDICATE-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-PREDICATE-EXTENT-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-PREDICATE-EXTENT-INDEX " Return the assertion count at PRED MT. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NUM-PREDICATE-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-NUM-PREDICATE-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NUM-PREDICATE-RULE-INDEX "NUM-PREDICATE-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NUM-PREDICATE-RULE-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NUM-PREDICATE-RULE-INDEX " Return the raw assertion count at PRED SENSE MT DIRECTION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RELEVANT-NUM-FUNCTION-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-RELEVANT-NUM-FUNCTION-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RELEVANT-NUM-FUNCTION-EXTENT-INDEX "RELEVANT-NUM-FUNCTION-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RELEVANT-NUM-FUNCTION-EXTENT-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RELEVANT-NUM-FUNCTION-EXTENT-INDEX " Compute the function extent at relevant mts under FUNC. This will be the entire function extent if #$BaseKB is relevant, and zero otherwise. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RELEVANT-NUM-GAF-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-RELEVANT-NUM-GAF-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RELEVANT-NUM-GAF-ARG-INDEX "RELEVANT-NUM-GAF-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RELEVANT-NUM-GAF-ARG-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RELEVANT-NUM-GAF-ARG-INDEX " Return the assertion count at relevant mts under TERM ARGNUM PRED. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RELEVANT-NUM-NART-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-RELEVANT-NUM-NART-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RELEVANT-NUM-NART-ARG-INDEX "RELEVANT-NUM-NART-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RELEVANT-NUM-NART-ARG-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RELEVANT-NUM-NART-ARG-INDEX " Compute the assertion count at relevant mts under TERM ARGNUM FUNC. This will be the entire count extent if #$BaseKB is relevant, and zero otherwise. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RELEVANT-NUM-PREDICATE-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-RELEVANT-NUM-PREDICATE-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RELEVANT-NUM-PREDICATE-EXTENT-INDEX "RELEVANT-NUM-PREDICATE-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RELEVANT-NUM-PREDICATE-EXTENT-INDEX #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RELEVANT-NUM-PREDICATE-EXTENT-INDEX " Compute the assertion count at relevant mts under PRED. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-TERM")
(cyc-assert '(#$isa #$SubLFunction-MAP-TERM #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-TERM "MAP-TERM") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-TERM #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-TERM " Apply FUNCTION to each assertion indexed from TERM. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-TERM 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-TERM-SELECTIVE")
(cyc-assert '(#$isa #$SubLFunction-MAP-TERM-SELECTIVE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-TERM-SELECTIVE "MAP-TERM-SELECTIVE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-TERM-SELECTIVE #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-TERM-SELECTIVE " Apply FUNCTION to each assertion indexed from TERM with TRUTH that passes TEST. If TRUTH is nil, all assertions are mapped. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-TERM-SELECTIVE 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-TERM-SELECTIVE 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-TERM-GAFS")
(cyc-assert '(#$isa #$SubLFunction-MAP-TERM-GAFS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-TERM-GAFS "MAP-TERM-GAFS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-TERM-GAFS #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-TERM-GAFS " Apply FUNCTION to every gaf indexed from TERM. If TRUTH is nil, all assertions are mapped. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-TERM-GAFS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-MT-CONTENTS")
(cyc-assert '(#$isa #$SubLFunction-MAP-MT-CONTENTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-MT-CONTENTS "MAP-MT-CONTENTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-MT-CONTENTS #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-MT-CONTENTS " Apply FUNCTION to each assertion with TRUTH in MT TERM. If TRUTH is nil, all assertions are mapped. If GAFS-ONLY, then only gafs are mapped. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-MT-CONTENTS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-MT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-MAP-MT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-MT-INDEX "MAP-MT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-MT-INDEX #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-MT-INDEX " Apply FUNCTION to each assertion with TRUTH at mt index MT. If TRUTH is nil, all assertions are mapped. If GAFS-ONLY, then only gafs are mapped. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-MT-INDEX 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-OTHER-INDEX")
(cyc-assert '(#$isa #$SubLFunction-MAP-OTHER-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-OTHER-INDEX "MAP-OTHER-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NULL")
(cyc-assert '(#$isa #$SubLFunction-NULL #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAP-OTHER-INDEX #$SubLFunction-NULL) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-OTHER-INDEX " Apply FUNCTION to each assertion with TRUTH at other index TERM. If TRUTH is nil, all assertions are mapped. If GAFS-ONLY, then only gafs are mapped. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-OTHER-INDEX 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-INDEX "GATHER-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-INDEX " Return a list of all mt-relevant assertions indexed via TERM. If REMOVE-DUPLICATES? is non-nil, assertions are guaranteed to only be listed once. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-INDEX-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-GATHER-INDEX-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-INDEX-IN-ANY-MT "GATHER-INDEX-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-INDEX-IN-ANY-MT #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-INDEX-IN-ANY-MT " Return a list of all assertions indexed via TERM. If REMOVE-DUPLICATES? is non-nil, assertions are guaranteed to only be listed once. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-EXCEPTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-EXCEPTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-EXCEPTION-RULE-INDEX "GATHER-EXCEPTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-EXCEPTION-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-EXCEPTION-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) it has a positive literal of the form (abnormal <whatever> RULE) b) if MT is non-nil, then MT must be its microtheory c) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-FUNCTION-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-FUNCTION-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-FUNCTION-EXTENT-INDEX "GATHER-FUNCTION-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-FUNCTION-EXTENT-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-FUNCTION-EXTENT-INDEX " Return a list of all #$termOfUnit assertions such that: FUNC is the functor of the naut arg2. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-FUNCTION-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-FUNCTION-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-FUNCTION-RULE-INDEX "GATHER-FUNCTION-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-FUNCTION-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-FUNCTION-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) it has a negative literal of the form (termOfUnit <whatever> (FUNC . <whatever>)) b) if MT is non-nil, then MT must be its microtheory c) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-GAF-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-GAF-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-GAF-ARG-INDEX "GATHER-GAF-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-GAF-ARG-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-GAF-ARG-INDEX " Return a list of all gaf assertions such that: a) TERM is its ARGNUMth argument b) if TRUTH is non-nil, then TRUTH is its truth value c) if PRED is non-nil, then PRED must be its predicate d) if MT is non-nil, then MT must be its microtheory (and PRED must be non-nil). ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSITIVE-INTEGER-P")
(cyc-assert '(#$isa #$SubLFunction-POSITIVE-INTEGER-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-GAF-ARG-INDEX 1 #$SubLFunction-POSITIVE-INTEGER-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSITIVE-INTEGER-P "POSITIVE-INTEGER-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-GENL-MT-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-GENL-MT-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-GENL-MT-RULE-INDEX "GATHER-GENL-MT-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-GENL-MT-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-GENL-MT-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) if SENSE is :pos, it has a positive literal of the form (genlMt <whatever> GENL-MT) b) if SENSE is :neg, it has a negative literal of the form (genlMt <whatever> GENL-MT) c) if RULE-MT is non-nil, then RULE-MT must be its microtheory d) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-GENL-MT-RULE-INDEX 1 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-GENLS-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-GENLS-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-GENLS-RULE-INDEX "GATHER-GENLS-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-GENLS-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-GENLS-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) if SENSE is :pos, it has a positive literal of the form (genls <whatever> COLLECTION) b) if SENSE is :neg, it has a negative literal of the form (genls <whatever> COLLECTION) c) if MT is non-nil, then MT must be its microtheory d) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-GENLS-RULE-INDEX 1 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-ISA-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-ISA-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-ISA-RULE-INDEX "GATHER-ISA-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-ISA-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-ISA-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) if SENSE is :pos, it has a positive literal of the form (isa <whatever> COLLECTION) b) if SENSE is :neg, it has a negative literal of the form (isa <whatever> COLLECTION) c) if MT is non-nil, then MT must be its microtheory d) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-ISA-RULE-INDEX 1 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-MT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-MT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-MT-INDEX "GATHER-MT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-MT-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-MT-INDEX " Return a list of all assertions such that TERM is its microtheory. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-NART-ARG-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-NART-ARG-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-NART-ARG-INDEX "GATHER-NART-ARG-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-NART-ARG-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-NART-ARG-INDEX " Return a list of all #$termOfUnit assertions with a naut arg2 such that: a) TERM is its ARGNUMth argument b) if FUNC is non-nil, then FUNC must be its functor ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSITIVE-INTEGER-P")
(cyc-assert '(#$isa #$SubLFunction-POSITIVE-INTEGER-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-NART-ARG-INDEX 1 #$SubLFunction-POSITIVE-INTEGER-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSITIVE-INTEGER-P "POSITIVE-INTEGER-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-OTHER-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-OTHER-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-OTHER-INDEX "GATHER-OTHER-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-OTHER-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-OTHER-INDEX " Return a list of other assertions mentioning TERM but not indexed in any other more useful manner. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-PREDICATE-EXTENT-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-PREDICATE-EXTENT-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-PREDICATE-EXTENT-INDEX "GATHER-PREDICATE-EXTENT-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-PREDICATE-EXTENT-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-PREDICATE-EXTENT-INDEX " Return a list of all gaf assertions such that: a) PRED is its predicate b) if TRUTH is non-nil, then TRUTH is its truth value c) if MT is non-nil, then MT must be its microtheory. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-PREDICATE-RULE-INDEX")
(cyc-assert '(#$isa #$SubLFunction-GATHER-PREDICATE-RULE-INDEX #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-PREDICATE-RULE-INDEX "GATHER-PREDICATE-RULE-INDEX") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-PREDICATE-RULE-INDEX #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-PREDICATE-RULE-INDEX " Return a list of all non-gaf assertions (rules) such that: a) if SENSE is :pos, it has PRED as a predicate in a positive literal b) if SENSE is :neg, it has PRED as a predicate in a negative literal c) if MT is non-nil, then MT must be its microtheory d) if DIRECTION is non-nil, then DIRECTION must be its direction. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-SENSE-P")
(cyc-assert '(#$isa #$SubLFunction-SENSE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GATHER-PREDICATE-RULE-INDEX 1 #$SubLFunction-SENSE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SENSE-P "SENSE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GATHER-TERM-ASSERTIONS")
(cyc-assert '(#$isa #$SubLFunction-GATHER-TERM-ASSERTIONS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GATHER-TERM-ASSERTIONS "GATHER-TERM-ASSERTIONS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GATHER-TERM-ASSERTIONS #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GATHER-TERM-ASSERTIONS " Return a list of all mt-relevant assertions of TERM. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FPRED-VALUE")
(cyc-assert '(#$isa #$SubLFunction-FPRED-VALUE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FPRED-VALUE "FPRED-VALUE") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FPRED-VALUE " Find the first gaf assertion such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return the term in the GATHER-ARG position if such an assertion exists. Otherwise, return NIL. Single value returned satisfies HL-TERM-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FPRED-VALUE-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-FPRED-VALUE-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FPRED-VALUE-IN-MT "FPRED-VALUE-IN-MT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FPRED-VALUE-IN-MT " Find the first gaf assertion such that: (a) the assertion is in microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return the term in the GATHER-ARG position if such an assertion exists. Otherwise, return NIL. Single value returned satisfies HL-TERM-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MT 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 3 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MT 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FPRED-VALUE-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-FPRED-VALUE-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FPRED-VALUE-IN-MTS "FPRED-VALUE-IN-MTS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FPRED-VALUE-IN-MTS " Find the first gaf assertion such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return the term in the GATHER-ARG position if such an assertion exists. Otherwise, return NIL. Single value returned satisfies HL-TERM-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MTS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 3 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-MTS 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FPRED-VALUE-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-FPRED-VALUE-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FPRED-VALUE-IN-ANY-MT "FPRED-VALUE-IN-ANY-MT") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FPRED-VALUE-IN-ANY-MT " Find the first gaf assertion such that: (a) the assertion is allowed to be in any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return the term in the GATHER-ARG position if such an assertion exists. Otherwise, return NIL. Single value returned satisfies HL-TERM-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-ANY-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-ANY-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-ANY-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-ANY-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-ANY-MT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-ANY-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-ANY-MT 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-ANY-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS "FPRED-VALUE-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS " If MT is NIL, behaves like FPRED-VALUE. Otherwise, behaves like FPRED-VALUE-IN-MT. Single value returned satisfies HL-TERM-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-FPRED-VALUE-IN-RELEVANT-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUES")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUES "PRED-VALUES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUES #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUES " Find all gaf assertions such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUES-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUES-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUES-IN-MT "PRED-VALUES-IN-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUES-IN-MT #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUES-IN-MT " Find all gaf assertions such that: (a) the assertion is in microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MT 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 3 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MT 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUES-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUES-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUES-IN-MTS "PRED-VALUES-IN-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUES-IN-MTS " Find all gaf assertions such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MTS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 3 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-MTS 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUES-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUES-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUES-IN-ANY-MT "PRED-VALUES-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUES-IN-ANY-MT " Find all gaf assertions such that: (a) the assertion is allowed to be in any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-ANY-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-ANY-MT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-ANY-MT 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-ANY-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUES-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS "PRED-VALUES-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS " If MT is NIL, behaves like PRED-VALUES. Otherwise, behaves like PRED-VALUES-IN-MT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUES-IN-RELEVANT-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-REFS")
(cyc-assert '(#$isa #$SubLFunction-PRED-REFS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-REFS "PRED-REFS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-REFS #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-REFS " Find all gaf assertions such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS 3 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS 2 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-REFS-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-REFS-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-REFS-IN-MT "PRED-REFS-IN-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-REFS-IN-MT #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-REFS-IN-MT " Find all gaf assertions such that: (a) the assertion is in microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MT 4 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-MT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MT 2 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-REFS-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-REFS-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-REFS-IN-MTS "PRED-REFS-IN-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-REFS-IN-MTS #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-REFS-IN-MTS " Find all gaf assertions such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MTS 4 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MTS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-MTS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-MTS 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-REFS-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-REFS-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-REFS-IN-ANY-MT "PRED-REFS-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-REFS-IN-ANY-MT #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-REFS-IN-ANY-MT " Find all gaf assertions such that: (a) the assertion is allowed to be in any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. Return a list of the terms in the GATHER-ARG position of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-ANY-MT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-ANY-MT 3 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-ANY-MT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-ANY-MT 2 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-ANY-MT 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-REFS-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS "PRED-REFS-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS " If MT is NIL, behaves like PRED-REFS. Otherwise, behaves like PRED-REFS-IN-MT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS 3 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS 2 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-REFS-IN-RELEVANT-MTS 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-PRED-VALUE")
(cyc-assert '(#$isa #$SubLFunction-SOME-PRED-VALUE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-PRED-VALUE "SOME-PRED-VALUE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SOME-PRED-VALUE #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-PRED-VALUE " Find the first gaf assertion such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE 4 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-PRED-VALUE-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-SOME-PRED-VALUE-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-PRED-VALUE-IN-MT "SOME-PRED-VALUE-IN-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-PRED-VALUE-IN-MT " Find the first gaf assertion such that: (a) the assertion is in microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT 3 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MT 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-PRED-VALUE-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-SOME-PRED-VALUE-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-PRED-VALUE-IN-MTS "SOME-PRED-VALUE-IN-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-PRED-VALUE-IN-MTS " Find the first gaf assertion such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS 3 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-MTS 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-PRED-VALUE-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT "SOME-PRED-VALUE-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT " Find the first gaf assertion such that: (a) the assertion is allowed to be in any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 4 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-ANY-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS "SOME-PRED-VALUE-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS " If MT is NIL, behaves like SOME-PRED-VALUE. Otherwise, behaves like SOME-PRED-VALUE-IN-MT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 4 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-PRED-VALUE-IN-RELEVANT-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-U-V-HOLDS")
(cyc-assert '(#$isa #$SubLFunction-PRED-U-V-HOLDS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-U-V-HOLDS "PRED-U-V-HOLDS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-U-V-HOLDS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-U-V-HOLDS " Find the first gaf assertion such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) U is the term in the U-ARG position. (e) V is the term in the V-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 3 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 2 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-U-V-HOLDS-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-U-V-HOLDS-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-U-V-HOLDS-IN-MT "PRED-U-V-HOLDS-IN-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-U-V-HOLDS-IN-MT " Find the first gaf assertion such that: (a) the assertion is in microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) U is the term in the U-ARG position. (e) V is the term in the V-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 6 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MT 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 4 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 3 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 7 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MT 7) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 2 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MT 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-U-V-HOLDS-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-U-V-HOLDS-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-U-V-HOLDS-IN-MTS "PRED-U-V-HOLDS-IN-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-U-V-HOLDS-IN-MTS " Find the first gaf assertion such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) U is the term in the U-ARG position. (e) V is the term in the V-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 6 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 3 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 7 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 7) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 2 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT "PRED-U-V-HOLDS-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT " Find the first gaf assertion such that: (a) the assertion is allowed to be in any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) U is the term in the U-ARG position. (e) V is the term in the V-ARG position. Return T if such an assertion exists, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 3 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 2 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-ANY-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS "PRED-U-V-HOLDS-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS " If MT is NIL, behaves like PRED-U-V-HOLDS. Otherwise, behaves like PRED-U-V-HOLDS-IN-MT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 4 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 3 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 2 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 5 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-U-V-HOLDS-IN-RELEVANT-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUE-TUPLES")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUE-TUPLES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUE-TUPLES "PRED-VALUE-TUPLES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUE-TUPLES #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUE-TUPLES " Find all gaf assertions such that: (a) the assertion is in a relevant microtheory (relevance is established outside) (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of tuples formed from the GATHER-ARGS positions of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUE-TUPLES 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUE-TUPLES-IN-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUE-TUPLES-IN-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUE-TUPLES-IN-MT "PRED-VALUE-TUPLES-IN-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUE-TUPLES-IN-MT " Find all gaf assertions such that: (a) the assertion is microtheory MT (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of tuples formed from the GATHER-ARGS positions of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MT 5 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUE-TUPLES-IN-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS "PRED-VALUE-TUPLES-IN-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS " Find all gaf assertions such that: (a) the assertion is in one of the microtheories in the list MTS (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of tuples formed from the GATHER-ARGS positions of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 6 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 6) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-MTS 5 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT "PRED-VALUE-TUPLES-IN-ANY-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT " Find all gaf assertions such that: (a) the assertion is allowed to be from any microtheory (b) if TRUTH is non-nil, the assertion has TRUTH as its truth value (c) PRED is the predicate used. (d) TERM is the term in the INDEX-ARG position. Return a list of tuples formed from the GATHER-ARGS positions of all such assertions. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUE-TUPLES-IN-ANY-MT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS")
(cyc-assert '(#$isa #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS "PRED-VALUE-TUPLES-IN-RELEVANT-MTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS " If MT is NIL, behaves like PRED-VALUE-TUPLES. Otherwise, behaves like PRED-VALUE-TUPLES-IN-MT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 4 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-TRUTH-P")
(cyc-assert '(#$isa #$SubLFunction-TRUTH-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 5 #$SubLFunction-TRUTH-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRUTH-P "TRUTH-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-PRED-VALUE-TUPLES-IN-RELEVANT-MTS 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REFLEXIVE-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-REFLEXIVE-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REFLEXIVE-PREDICATEqm "REFLEXIVE-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REFLEXIVE-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REFLEXIVE-PREDICATEqm " Return T iff PREDICATE is a reflexive predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-IRREFLEXIVE-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-IRREFLEXIVE-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-IRREFLEXIVE-PREDICATEqm "IRREFLEXIVE-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-IRREFLEXIVE-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-IRREFLEXIVE-PREDICATEqm " Return T iff PREDICATE is an irreflexive predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SYMMETRIC-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-SYMMETRIC-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SYMMETRIC-PREDICATEqm "SYMMETRIC-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SYMMETRIC-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SYMMETRIC-PREDICATEqm " Return T iff PREDICATE is a symmetric predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASYMMETRIC-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-ASYMMETRIC-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASYMMETRIC-PREDICATEqm "ASYMMETRIC-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASYMMETRIC-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASYMMETRIC-PREDICATEqm " Return T iff PREDICATE is an asymmetric predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANTI-SYMMETRIC-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-ANTI-SYMMETRIC-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANTI-SYMMETRIC-PREDICATEqm "ANTI-SYMMETRIC-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANTI-SYMMETRIC-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANTI-SYMMETRIC-PREDICATEqm " Return T iff PREDICATE is an anti-symmetric predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-TRANSITIVE-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-TRANSITIVE-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-TRANSITIVE-PREDICATEqm "TRANSITIVE-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-TRANSITIVE-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-TRANSITIVE-PREDICATEqm " Return T iff PREDICATE is a transitive predicate. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RELATIONqm")
(cyc-assert '(#$isa #$SubLFunction-RELATIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RELATIONqm "RELATION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RELATIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RELATIONqm " Return T iff RELATION is a relationship. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COMMUTATIVE-RELATIONqm")
(cyc-assert '(#$isa #$SubLFunction-COMMUTATIVE-RELATIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COMMUTATIVE-RELATIONqm "COMMUTATIVE-RELATION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COMMUTATIVE-RELATIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COMMUTATIVE-RELATIONqm " Return T iff RELATION is a commutative relation. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COMMUTATIVE-FUNCTIONqm")
(cyc-assert '(#$isa #$SubLFunction-COMMUTATIVE-FUNCTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COMMUTATIVE-FUNCTIONqm "COMMUTATIVE-FUNCTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COMMUTATIVE-FUNCTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COMMUTATIVE-FUNCTIONqm " Return T iff FUNCTION is a commutative function. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-BINARY-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-BINARY-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BINARY-PREDICATEqm "BINARY-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-BINARY-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-BINARY-PREDICATEqm " Return T iff PREDICATE is a predicate of arity 2. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-ISA")
(cyc-assert '(#$isa #$SubLFunction-ARGN-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-ISA "ARGN-ISA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-ISA " Returns a list of the local isa constraints applied to the ARGNUMth argument of RELATION (#$argsIsa conjoins with #$arg1Isa et al). ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-ISA 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-ARGN-ISA")
(cyc-assert '(#$isa #$SubLFunction-MIN-ARGN-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-ARGN-ISA "MIN-ARGN-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-ARGN-ISA #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-ARGN-ISA " Returns a list of the most specific local isa-constraints applicable to argument N of RELATION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-ARGN-ISA 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-ARGN-ISA 2 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-ISA-OF")
(cyc-assert '(#$isa #$SubLFunction-ARGN-ISA-OF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-ISA-OF "ARGN-ISA-OF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGN-ISA-OF #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-ISA-OF " Returns the relations for which COLLECTION is a local isa constraint applied to argument ARGNUM. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-ISA-OF 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-GENL")
(cyc-assert '(#$isa #$SubLFunction-ARGN-GENL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-GENL "ARGN-GENL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGN-GENL #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-GENL " Returns the local genl constraints applied to the ARGNUMth argument of RELATION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-GENL 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-ARGN-GENL")
(cyc-assert '(#$isa #$SubLFunction-MIN-ARGN-GENL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-ARGN-GENL "MIN-ARGN-GENL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-ARGN-GENL #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-ARGN-GENL " Return a list of the most specific local genl constraints applicable to the argument N of RELATION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-ARGN-GENL 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-GENL-OF")
(cyc-assert '(#$isa #$SubLFunction-ARGN-GENL-OF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-GENL-OF "ARGN-GENL-OF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGN-GENL-OF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-GENL-OF " Returns a list of the predicates for which COLLECTION is a local genl constraint applied to the Nth argument. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-GENL-OF 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DEFINING-DEFNS")
(cyc-assert '(#$isa #$SubLFunction-DEFINING-DEFNS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DEFINING-DEFNS "DEFINING-DEFNS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-DEFINING-DEFNS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DEFINING-DEFNS " Return a list of the local defining (necessary and sufficient definitions) of collection COL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NECESSARY-DEFNS")
(cyc-assert '(#$isa #$SubLFunction-NECESSARY-DEFNS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NECESSARY-DEFNS "NECESSARY-DEFNS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NECESSARY-DEFNS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NECESSARY-DEFNS " Return a list of the local necessary definitions of collection COL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SUFFICIENT-DEFNS")
(cyc-assert '(#$isa #$SubLFunction-SUFFICIENT-DEFNS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SUFFICIENT-DEFNS "SUFFICIENT-DEFNS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SUFFICIENT-DEFNS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SUFFICIENT-DEFNS " Return a list of the local sufficient definitions of collection COL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SUFFICIENT-DEFNS")
(cyc-assert '(#$isa #$SubLFunction-ALL-SUFFICIENT-DEFNS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SUFFICIENT-DEFNS "ALL-SUFFICIENT-DEFNS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SUFFICIENT-DEFNS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SUFFICIENT-DEFNS " Return a list of all sufficient definitions of collection COL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARITY")
(cyc-assert '(#$isa #$SubLFunction-ARITY #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARITY "ARITY") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARITY " Return the arity for relation constant RELATION. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-RESULT-ISA")
(cyc-assert '(#$isa #$SubLFunction-RESULT-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-RESULT-ISA "RESULT-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-RESULT-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-RESULT-ISA " Return a list of the collections that include as instances the results of non-predicate function constant FUNCTOR. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CREATOR")
(cyc-assert '(#$isa #$SubLFunction-CREATOR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CREATOR "CREATOR") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CREATOR #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CREATOR " Identify the cyclist who created FORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CREATOR 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CREATOR 2 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CREATOR 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CREATION-TIME")
(cyc-assert '(#$isa #$SubLFunction-CREATION-TIME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CREATION-TIME "CREATION-TIME") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CREATION-TIME #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CREATION-TIME " Identify when FORT was created. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CREATION-TIME 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CREATION-TIME 2 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CREATION-TIME 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COMMENT")
(cyc-assert '(#$isa #$SubLFunction-COMMENT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COMMENT "COMMENT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-STRINGP")
(cyc-assert '(#$isa #$SubLFunction-STRINGP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COMMENT #$SubLFunction-STRINGP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COMMENT " Return the comment string for FORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COMMENT 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTED-BY")
(cyc-assert '(#$isa #$SubLFunction-ASSERTED-BY #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTED-BY "ASSERTED-BY") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTED-BY " Returns the cyclist who asserted ASSERTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTED-BY 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTED-WHEN")
(cyc-assert '(#$isa #$SubLFunction-ASSERTED-WHEN #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTED-WHEN "ASSERTED-WHEN") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTED-WHEN #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTED-WHEN " Returns the date when ASSERTION was asserted. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTED-WHEN 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-REVIEWER")
(cyc-assert '(#$isa #$SubLFunction-REVIEWER #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-REVIEWER "REVIEWER") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-REVIEWER #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-REVIEWER " Identify the cyclist who reviewed FORT. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-REVIEWER 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-REVIEWER 2 #$SubLFunction-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HLMT-P "HLMT-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-REVIEWER 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-TERM-ASSERTIONS")
(cyc-assert '(#$isa #$SubLFunction-ALL-TERM-ASSERTIONS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-TERM-ASSERTIONS "ALL-TERM-ASSERTIONS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-TERM-ASSERTIONS #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-TERM-ASSERTIONS " Return a list of all the assertions indexed via the indexed term TERM. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-TERM-ASSERTIONS 1 #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INDEXED-TERM-P "INDEXED-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ISA-RELEVANT-ASSERTIONS")
(cyc-assert '(#$isa #$SubLFunction-ISA-RELEVANT-ASSERTIONS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ISA-RELEVANT-ASSERTIONS "ISA-RELEVANT-ASSERTIONS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ISA-RELEVANT-ASSERTIONS #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ISA-RELEVANT-ASSERTIONS " Return a list of all (e.g., inheritance) rules relevant to TERM by virtue of the collections of which it is an instance. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTIONS-MENTIONING-TERMS")
(cyc-assert '(#$isa #$SubLFunction-ASSERTIONS-MENTIONING-TERMS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTIONS-MENTIONING-TERMS "ASSERTIONS-MENTIONING-TERMS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTIONS-MENTIONING-TERMS #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTIONS-MENTIONING-TERMS " Return a list of assertions that mention every term in TERM-LIST. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PRIMITIVE-COLLECTIONqm")
(cyc-assert '(#$isa #$SubLFunction-PRIMITIVE-COLLECTIONqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PRIMITIVE-COLLECTIONqm "PRIMITIVE-COLLECTION?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PRIMITIVE-COLLECTIONqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PRIMITIVE-COLLECTIONqm " Return T iff FORT is a collection for which no classical (necessary and sufficient) definition is known. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-PREDS-FOR-PAIR")
(cyc-assert '(#$isa #$SubLFunction-PREDS-FOR-PAIR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PREDS-FOR-PAIR "PREDS-FOR-PAIR") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-PREDS-FOR-PAIR #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-PREDS-FOR-PAIR " Return a list of the predicates relevant to relating FORT-1 and FORT-2. MODE may be :figurative (instances of collections), :literal (constants), or :mixed (referents). ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PREDS-FOR-PAIR 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-PREDS-FOR-PAIR 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COLLECTIONS-COEXTENSIONALqm")
(cyc-assert '(#$isa #$SubLFunction-COLLECTIONS-COEXTENSIONALqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COLLECTIONS-COEXTENSIONALqm "COLLECTIONS-COEXTENSIONAL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COLLECTIONS-COEXTENSIONALqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COLLECTIONS-COEXTENSIONALqm " Are COL-1 and COL-2 coextensional? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-COEXTENSIONALqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-COEXTENSIONALqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COLLECTIONS-DISJOINTqm")
(cyc-assert '(#$isa #$SubLFunction-COLLECTIONS-DISJOINTqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COLLECTIONS-DISJOINTqm "COLLECTIONS-DISJOINT?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COLLECTIONS-DISJOINTqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COLLECTIONS-DISJOINTqm " Are collections COL-1 and COL-2 disjoint? (uses only sbhl graphs: their extensions are not searched nor are their necessary conditions analyzed) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-DISJOINTqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-DISJOINTqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COLLECTIONS-INTERSECTqm")
(cyc-assert '(#$isa #$SubLFunction-COLLECTIONS-INTERSECTqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COLLECTIONS-INTERSECTqm "COLLECTIONS-INTERSECT?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COLLECTIONS-INTERSECTqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COLLECTIONS-INTERSECTqm " Do collections COL-1 and COL-2 intersect? (uses only sbhl graphs: their extensions are not searched nor are their sufficient conditions analyzed) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-INTERSECTqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTIONS-INTERSECTqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COUNT-ALL-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-COUNT-ALL-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COUNT-ALL-INSTANCES "COUNT-ALL-INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COUNT-ALL-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COUNT-ALL-INSTANCES " Counts the number of instances in the collection and then returns the count. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COUNT-ALL-INSTANCES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-STRENGTH-P")
(cyc-assert '(#$isa #$SubLFunction-EL-STRENGTH-P #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-STRENGTH-P "EL-STRENGTH-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-STRENGTH-P #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-STRENGTH-P " Return T iff OBJECT is a valid CycL assertion strength :default or :monotonic. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-TO-HL")
(cyc-assert '(#$isa #$SubLFunction-EL-TO-HL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-TO-HL "EL-TO-HL") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-TO-HL " Translate el expression FORMULA into its equivalent canonical hl expressions ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-EL-TO-HL 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-TO-HL-QUERY")
(cyc-assert '(#$isa #$SubLFunction-EL-TO-HL-QUERY #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-TO-HL-QUERY "EL-TO-HL-QUERY") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-TO-HL-QUERY " Translate el query FORMULA into its equivalent hl expressions ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORMULA-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-EL-TO-HL-QUERY 1 #$SubLFunction-EL-FORMULA-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-P "EL-FORMULA-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ASSERTION-EL-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-EL-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-EL-FORMULA "ASSERTION-EL-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ASSERTION-EL-FORMULA #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ASSERTION-EL-FORMULA " Return the el formula for ASSERTION ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ASSERTION-EL-FORMULA 1 #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERTION-P "ASSERTION-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-WFF-SYNTAXqm")
(cyc-assert '(#$isa #$SubLFunction-EL-WFF-SYNTAXqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-WFF-SYNTAXqm "EL-WFF-SYNTAX?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-WFF-SYNTAXqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-WFF-SYNTAXqm " Is FORMULA well-formed wrt syntax? ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-WFF-SYNTAXplusARITYqm")
(cyc-assert '(#$isa #$SubLFunction-EL-WFF-SYNTAXplusARITYqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-WFF-SYNTAXplusARITYqm "EL-WFF-SYNTAX+ARITY?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-WFF-SYNTAXplusARITYqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-WFF-SYNTAXplusARITYqm " Is FORMULA well-formed wrt syntax and arity? ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GROUNDqm")
(cyc-assert '(#$isa #$SubLFunction-GROUNDqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GROUNDqm "GROUND?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GROUNDqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GROUNDqm " Returns whether EXPRESSION is free of any variables? ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-FORMULA-OKqm")
(cyc-assert '(#$isa #$SubLFunction-EL-FORMULA-OKqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORMULA-OKqm "EL-FORMULA-OK?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-FORMULA-OKqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-FORMULA-OKqm " Is FORMULA a well-formed el formula? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-EL-FORMULA-OKqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-EL-QUERY-OKqm")
(cyc-assert '(#$isa #$SubLFunction-EL-QUERY-OKqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-QUERY-OKqm "EL-QUERY-OK?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-EL-QUERY-OKqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-EL-QUERY-OKqm " Is FORMULA a well-formed el query? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-EL-QUERY-OKqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-DIAGNOSE-EL-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-DIAGNOSE-EL-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-DIAGNOSE-EL-FORMULA "DIAGNOSE-EL-FORMULA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-DIAGNOSE-EL-FORMULA " Identify how el formula FORMULA fails syntactic or semantic constraints ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-DIAGNOSE-EL-FORMULA 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-ISA")
(cyc-assert '(#$isa #$SubLFunction-MIN-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-ISA "MIN-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-ISA " Returns most-specific collections that include TERM (inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-ISA 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-NOT-ISA")
(cyc-assert '(#$isa #$SubLFunction-MAX-NOT-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-NOT-ISA "MAX-NOT-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-NOT-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-NOT-ISA " Returns most-general collections that do not include TERM (expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-NOT-ISA 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-ISA")
(cyc-assert '(#$isa #$SubLFunction-ALL-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-ISA "ALL-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-ISA " Returns all collections that include TERM (inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-ISA 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-ISA")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-ISA "UNION-ALL-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-ISA " Returns all collections that include any term in TERMS (inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-ISA 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-ISA")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-ISA "ALL-NOT-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-ISA " Returns all collections that do not include TERM (expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-ISA 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-ALL-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-INSTANCES "ALL-INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-INSTANCES " Returns all instances of COLLECTION (expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-INSTANCES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-ISA")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-ISA "MAP-ALL-ISA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-ISA " Apply FUNCTION to every all-isa of TERM (FUNCTION must not effect the current sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-ISA 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-ISA 2 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-WRT-ALL-ISA")
(cyc-assert '(#$isa #$SubLFunction-ANY-WRT-ALL-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-WRT-ALL-ISA "ANY-WRT-ALL-ISA") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-WRT-ALL-ISA " Return the first encountered non-nil result of applying FUNCTION to the all-isa of TERM (FUNCTION may not effect the current sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-WRT-ALL-ISA 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-WRT-ALL-ISA 2 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-INSTANCES "MAP-ALL-INSTANCES") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-INSTANCES " Apply FUNCTION to each unique instance of all specs of COLLECTION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-INSTANCES 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-INSTANCES 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-MAP-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-INSTANCES "MAP-INSTANCES") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-INSTANCES " apply FUNCTION to every (least general) #$isa of TERM ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-INSTANCES 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-INSTANCES 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ISAqm")
(cyc-assert '(#$isa #$SubLFunction-ISAqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ISAqm "ISA?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ISAqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ISAqm " Returns whether TERM is an instance of COLLECTION ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ISAqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ISA-ANYqm")
(cyc-assert '(#$isa #$SubLFunction-ISA-ANYqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ISA-ANYqm "ISA-ANY?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ISA-ANYqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ISA-ANYqm " Returns whether TERM is an instance of any collection in COLLECTIONS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ISA-ANYqm 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ISA-ANYqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-ISA-ANYqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-ISA-ANYqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-ISA-ANYqm "ANY-ISA-ANY?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-ISA-ANYqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-ISA-ANYqm " @return booleanp; whether any term in TERMS is an instance of any collection in COLLECTIONS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ISA-ANYqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ISA-ANYqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-ISAqm")
(cyc-assert '(#$isa #$SubLFunction-NOT-ISAqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-ISAqm "NOT-ISA?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-ISAqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-ISAqm " @return boolenap; whether TERM is known to not be an instance of COLLECTION ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-ISAqm 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-ISAqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-INSTANCESqm")
(cyc-assert '(#$isa #$SubLFunction-INSTANCESqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INSTANCESqm "INSTANCES?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-INSTANCESqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-INSTANCESqm " Returns whether COLLECTION has any direct instances ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-INSTANCESqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INSTANCES "INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-INSTANCES " Returns the asserted instances of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-INSTANCES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ISA-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-ISA-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ISA-SIBLINGS "ISA-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ISA-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ISA-SIBLINGS " Returns the direct isas of those collections of which TERM is a direct instance ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ISA-SIBLINGS 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS "MAX-FLOOR-MTS-OF-ISA-PATHS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS " Returns in what (most-genl) mts TERM is an instance of COLLECTION ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-ISA-PATHS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-ISAqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-ISAqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-ISAqm "WHY-ISA?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-ISAqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-ISAqm " Returns justification of (isa TERM COLLECTION) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-ISAqm 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-ISAqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-NOT-ISAqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-NOT-ISAqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-NOT-ISAqm "WHY-NOT-ISA?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-NOT-ISAqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-NOT-ISAqm " Returns justification of (not (isa TERM COLLECTION)) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-ISAqm 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-ISAqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-INSTANCES-AMONG")
(cyc-assert '(#$isa #$SubLFunction-ALL-INSTANCES-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-INSTANCES-AMONG "ALL-INSTANCES-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-INSTANCES-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-INSTANCES-AMONG " Returns those elements of TERMS that include COL as an all-isa ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-INSTANCES-AMONG 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-INSTANCES-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-ISA-AMONG")
(cyc-assert '(#$isa #$SubLFunction-ALL-ISA-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-ISA-AMONG "ALL-ISA-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-ISA-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-ISA-AMONG " Returns those elements of COLLECTIONS that include TERM as an all-instance ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-ISA-AMONG 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-ISA-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-ISAS-WRT")
(cyc-assert '(#$isa #$SubLFunction-ALL-ISAS-WRT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-ISAS-WRT "ALL-ISAS-WRT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-ISAS-WRT #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-ISAS-WRT " Returns all isa of term TERM that are also instances of collection ISA (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-ISAS-WRT 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-ISAS-WRT 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-INSTANCE-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-INSTANCE-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INSTANCE-SIBLINGS "INSTANCE-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-INSTANCE-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-INSTANCE-SIBLINGS " Returns the direct instances of those collections having direct isa TERM ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-INSTANCE-SIBLINGS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-MAX-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-INSTANCES "MAX-INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-INSTANCES " Returns the maximal among the asserted instances of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-INSTANCES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-NOT-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-MIN-NOT-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-NOT-INSTANCES "MIN-NOT-INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-NOT-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-NOT-INSTANCES " Returns the most-specific negated instances of collection COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-NOT-INSTANCES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-ISA-AMONG")
(cyc-assert '(#$isa #$SubLFunction-NOT-ISA-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-ISA-AMONG "NOT-ISA-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-ISA-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-ISA-AMONG " Returns those elements of COLLECTIONS that do NOT include TERM ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-HL-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-HL-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-ISA-AMONG 1 #$SubLFunction-HL-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-HL-TERM-P "HL-TERM-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-ISA-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-INSTANCES")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-INSTANCES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-INSTANCES "UNION-ALL-INSTANCES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-INSTANCES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-INSTANCES " Returns set of all instances of each collection in COLS (expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-INSTANCES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-GENLS")
(cyc-assert '(#$isa #$SubLFunction-MIN-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-GENLS "MIN-GENLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-GENLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-GENLS " Returns the most-specific genls of collection COL ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-NOT-GENLS")
(cyc-assert '(#$isa #$SubLFunction-MAX-NOT-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-NOT-GENLS "MAX-NOT-GENLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-NOT-GENLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-NOT-GENLS " Returns the least-specific negated genls of collection COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-NOT-GENLS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-SPECS")
(cyc-assert '(#$isa #$SubLFunction-MAX-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-SPECS "MAX-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-SPECS " Returns the least-specific specs of collection COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-SPECS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-NOT-SPECS")
(cyc-assert '(#$isa #$SubLFunction-MIN-NOT-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-NOT-SPECS "MIN-NOT-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-NOT-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-NOT-SPECS " Returns the most-specific negated specs of collection COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-NOT-SPECS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-GENL-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-SIBLINGS "GENL-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-SIBLINGS " Returns the direct genls of those direct spec collections of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-SIBLINGS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-SPEC-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-SIBLINGS "SPEC-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-SIBLINGS " Returns the direct specs of those direct genls collections of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-SIBLINGS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENLS")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENLS "ALL-GENLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENLS " Returns all genls of collection COL (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENLS-WRT")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENLS-WRT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENLS-WRT "ALL-GENLS-WRT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENLS-WRT #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENLS-WRT " Returns all genls of collection SPEC that are also specs of collection GENL (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-WRT 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-WRT 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-GENLS")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-GENLS "UNION-ALL-GENLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-GENLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-GENLS " Returns all genls of each collection in COLs ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-GENLS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENLS-IF")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENLS-IF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENLS-IF "ALL-GENLS-IF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENLS-IF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENLS-IF " Returns all genls of collection COL that satisfy FUNCTION (FUNCTION must not effect sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-IF 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-IF 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-GENLS")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-GENLS "ALL-NOT-GENLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-GENLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-GENLS " Returns all negated genls of collection COL (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-GENLS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPECS")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPECS "ALL-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPECS " Returns all specs of collection COL (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPECS-IF")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPECS-IF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPECS-IF "ALL-SPECS-IF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPECS-IF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPECS-IF " Returns all genls of collection COL that satisfy FUNCTION (FUNCTION must not effect sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECS-IF 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECS-IF 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-DEPENDENT-SPECS")
(cyc-assert '(#$isa #$SubLFunction-ALL-DEPENDENT-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-DEPENDENT-SPECS "ALL-DEPENDENT-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-DEPENDENT-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-DEPENDENT-SPECS " Returns all specs s of COL s.t. every path connecting s to any genl of COL must pass through COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-DEPENDENT-SPECS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-SPECS")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-SPECS "UNION-ALL-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-SPECS " Returns all specs of each collection in COLs ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-SPECS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENLqm "GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENLqm " Returns whether (#$genls SPEC GENL) can be inferred. (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENLqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPECqm")
(cyc-assert '(#$isa #$SubLFunction-SPECqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPECqm "SPEC?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPECqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPECqm " Returns whether (#$genls SPEC GENL) can be inferred. (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPECqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPECqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-GENLqm "ANY-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-GENLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-GENLqm " (any-genl? spec genls) is t iff (genl? spec genl) for some genl in genls (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENLqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENLqm "ALL-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENLqm " Returns T iff (genl? spec genl) for every genl in GENLS (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-SPECqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-SPECqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-SPECqm "ANY-SPEC?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-SPECqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-SPECqm " Returns T iff (spec? genl spec) for some spec in SPECS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-SPECqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-SPECqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPECqm")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPECqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPECqm "ALL-SPEC?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPECqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPECqm " Returns T iff (spec? genl spec) for every spec in SPECS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-GENL-ANYqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-GENL-ANYqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-GENL-ANYqm "ANY-GENL-ANY?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-GENL-ANYqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-GENL-ANYqm " Return T iff (genl? spec genl mt) for any spec in SPECS, genl in GENLS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ANYqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ANYqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-GENL-ALLqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-GENL-ALLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-GENL-ALLqm "ANY-GENL-ALL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-GENL-ALLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-GENL-ALLqm " Return T iff (genl? spec genl mt) for any spec in SPECS and all genl in GENLS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ALLqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ALLqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-NOT-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-GENLqm "NOT-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-GENLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-GENLqm " Return whether collection NOT-GENL is not a genl of COL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENLqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-NOT-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-NOT-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-NOT-GENLqm "ANY-NOT-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-NOT-GENLqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-NOT-GENLqm " Returns whether any collection in NOT-GENLS is not a genl of COL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-NOT-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-NOT-GENLqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-COLLECTION-LEAVES")
(cyc-assert '(#$isa #$SubLFunction-COLLECTION-LEAVES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-COLLECTION-LEAVES "COLLECTION-LEAVES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-COLLECTION-LEAVES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-COLLECTION-LEAVES " Returns the minimally-general (the most specific) among all-specs of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-COLLECTION-LEAVES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-COLS")
(cyc-assert '(#$isa #$SubLFunction-MIN-COLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-COLS "MIN-COLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-COLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-COLS " Returns the minimally-general (the most specific) among reified collections COLS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-COLS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-COLS")
(cyc-assert '(#$isa #$SubLFunction-MAX-COLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-COLS "MAX-COLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-COLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-COLS " Returns the most-general among reified collections COLS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-COLS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-CEILING-COLS")
(cyc-assert '(#$isa #$SubLFunction-MIN-CEILING-COLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-CEILING-COLS "MIN-CEILING-COLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-CEILING-COLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-CEILING-COLS " Returns the most specific common generalizations among reified collections COLS (if CANDIDATES is non-nil, then result is a subset of CANDIDATES) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-CEILING-COLS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-COLS")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-COLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-COLS "MAX-FLOOR-COLS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-FLOOR-COLS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-COLS " Returns the most general common specializations among reified collections COLS (if CANDIDATES is non-nil, then result is a subset of CANDIDATES) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-COLS 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-DISJOINT-COLLECTION-PAIR")
(cyc-assert '(#$isa #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIR "ANY-DISJOINT-COLLECTION-PAIR") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIR #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIR " Returns a pair of disjoint elements of COLS (if any exist) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIR 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm "ANY-DISJOINT-COLLECTION-PAIR?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm " Are any two collections in COLS disjoint? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-DISJOINT-COLLECTION-PAIRqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-COLLECTIONS-DISJOINTqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm "WHY-COLLECTIONS-DISJOINT?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm " Justification of (disjointWith C1 C2) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-COLLECTIONS-DISJOINTqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-GENL-ISA")
(cyc-assert '(#$isa #$SubLFunction-ANY-GENL-ISA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-GENL-ISA "ANY-GENL-ISA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-GENL-ISA #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-GENL-ISA " Return some genl of COL that isa instance of ISA (if any such genl exists) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ISA 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-ISA 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-LIGHTER-COL")
(cyc-assert '(#$isa #$SubLFunction-LIGHTER-COL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LIGHTER-COL "LIGHTER-COL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-LIGHTER-COL #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-LIGHTER-COL " Return COL-B iff it has fewer specs than COL-A, else return COL-A ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-LIGHTER-COL 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-LIGHTER-COL 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SHALLOWER-COL")
(cyc-assert '(#$isa #$SubLFunction-SHALLOWER-COL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SHALLOWER-COL "SHALLOWER-COL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SHALLOWER-COL #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SHALLOWER-COL " Return COL-B iff it has fewer genls than COL-A, else return COL-A ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SHALLOWER-COL 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SHALLOWER-COL 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS "MAX-FLOOR-MTS-OF-GENLS-PATHS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS " @return listp; Returns in what (most-genl) mts GENL is a genls of SPEC ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENLS-PATHS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-NOT-ASSERT-GENLSqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-NOT-ASSERT-GENLSqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-NOT-ASSERT-GENLSqm "WHY-NOT-ASSERT-GENLS?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-NOT-ASSERT-GENLSqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-NOT-ASSERT-GENLSqm " Justification of why asserting (genls SPEC GENL) is not consistent ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-ASSERT-GENLSqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-ASSERT-GENLSqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-GENLS")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-GENLS "MAP-ALL-GENLS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-GENLS " Applies FN to every (all) genls of COL (FN must not effect the current sbhl space) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-GENLS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-GENLS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-ALL-GENLS")
(cyc-assert '(#$isa #$SubLFunction-ANY-ALL-GENLS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-ALL-GENLS "ANY-ALL-GENLS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-ALL-GENLS " Return a non-nil result of applying FN to some all-genl of COL (FN must not effect the current sbhl space) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ALL-GENLS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ALL-GENLS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-SPECS")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-SPECS "MAP-ALL-SPECS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-SPECS " Applies FN to every (all) specs of COL (FN must not effect the current sbhl space) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-SPECS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-SPECS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-ALL-SPECS")
(cyc-assert '(#$isa #$SubLFunction-ANY-ALL-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-ALL-SPECS "ANY-ALL-SPECS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-ALL-SPECS " Return a non-nil result of applying FN to some all-spec of COL (FN must not effect the current sbhl space) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ALL-SPECS 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-ALL-SPECS 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENLS-AMONG")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENLS-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENLS-AMONG "ALL-GENLS-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENLS-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENLS-AMONG " Returns those genls of COL that are included among CANDIDATEs ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-AMONG 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENLS-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-SPECqm")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-SPECqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-SPECqm "ALL-NOT-SPEC?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-SPECqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-SPECqm " Return whether every collection in NOT-SPECS is not a spec of COL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-SPECqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-SPECqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-SPECS")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-SPECS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-SPECS "ALL-NOT-SPECS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-SPECS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-SPECS " Returns all negated specs of collection COL (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-SPECS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-ANYqm")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-ANYqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-ANYqm "ALL-SPEC-ANY?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-ANYqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-ANYqm " Return T iff for each spec in SPECS there is some genl in GENLS s.t. (genl? spec genl mt) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-ANYqm 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-ANYqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPECS-AMONG")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPECS-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPECS-AMONG "ALL-SPECS-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPECS-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPECS-AMONG " Returns those specs of COL that are included among CANDIDATEs ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECS-AMONG 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPECS-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-SPEC-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-SIBLINGS "SPEC-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-SIBLINGS " Returns the direct specs of those direct genls collections of COL ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-SIBLINGS 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-GENLqm "WHY-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-GENLqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-GENLqm " Justification of (genls SPEC GENL) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENLqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-NOT-GENLqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-NOT-GENLqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-NOT-GENLqm "WHY-NOT-GENL?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-NOT-GENLqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-NOT-GENLqm " Justification of (not (genls SPEC GENL)) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENLqm 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENLqm 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MIN-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-GENL-PREDICATES "MIN-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-GENL-PREDICATES " Returns the most-specific local genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-MIN-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-GENL-INVERSES "MIN-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-GENL-INVERSES " Returns the most-specific local genlInverses of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-NOT-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MAX-NOT-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-NOT-GENL-PREDICATES "MAX-NOT-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-NOT-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-NOT-GENL-PREDICATES " Returns the most-general local negated genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-NOT-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-NOT-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-MAX-NOT-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-NOT-GENL-INVERSES "MAX-NOT-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-NOT-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-NOT-GENL-INVERSES " Returns the most-general local negated genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-NOT-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MAX-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-SPEC-PREDICATES "MAX-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-SPEC-PREDICATES " Returns the most-general specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-MAX-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-SPEC-INVERSES "MAX-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-SPEC-INVERSES " Returns the most-general specInverses of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-NOT-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MIN-NOT-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-NOT-SPEC-PREDICATES "MIN-NOT-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-NOT-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-NOT-SPEC-PREDICATES " Returns the most-specific negated specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-NOT-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-NOT-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-MIN-NOT-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-NOT-SPEC-INVERSES "MIN-NOT-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-NOT-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-NOT-SPEC-INVERSES " Returns the most-specific negated specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-NOT-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-PREDICATE-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-GENL-PREDICATE-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-PREDICATE-SIBLINGS "GENL-PREDICATE-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-PREDICATE-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-PREDICATE-SIBLINGS " Returns the direct #$genlPreds of those predicates having direct spec-preds PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-PREDICATE-SIBLINGS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-INVERSE-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-GENL-INVERSE-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-INVERSE-SIBLINGS "GENL-INVERSE-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-INVERSE-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-INVERSE-SIBLINGS " Returns the direct #$genlInverse of those predicates having direct spec-inverses PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-INVERSE-SIBLINGS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-PREDICATE-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-SPEC-PREDICATE-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-PREDICATE-SIBLINGS "SPEC-PREDICATE-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-PREDICATE-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-PREDICATE-SIBLINGS " Returns the direct spec-preds of those collections having direct #$genlPreds PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-PREDICATE-SIBLINGS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-INVERSE-SIBLINGS")
(cyc-assert '(#$isa #$SubLFunction-SPEC-INVERSE-SIBLINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-INVERSE-SIBLINGS "SPEC-INVERSE-SIBLINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-INVERSE-SIBLINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-INVERSE-SIBLINGS " Returns the direct spec-inverses of those collections having direct #$genlInverse PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-INVERSE-SIBLINGS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-PREDICATES "ALL-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-PREDICATES " Returns all genlPreds of predicate PRED (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-INVERSES "ALL-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-INVERSES " Returns all genlPreds of predicate PRED (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-GENL-PREDICATES "ALL-NOT-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-GENL-PREDICATES " Returns all negated genlPreds of predicate PRED (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-GENL-INVERSES "ALL-NOT-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-GENL-INVERSES " Returns all negated genlPreds of predicate PRED (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-PREDICATES "ALL-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-PREDICATES " Returns all predicates having PRED as a genlPred (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-INVERSES "ALL-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-INVERSES " Returns all predicates having PRED as a genlInverse (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-PREDS-WRT-TYPE")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE "ALL-SPEC-PREDS-WRT-TYPE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE " Returns those all-spec-preds of PRED for which instances of COL are legal in arguments in position ARG ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-TYPE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-PREDS-WRT-ARG")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG "ALL-SPEC-PREDS-WRT-ARG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG " Returns those all-spec-preds of PRED for which FORT is legal as arguments in position ARG ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG 3 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-PREDS-WRT-ARG 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-SPEC-PREDICATES "ALL-NOT-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-SPEC-PREDICATES " Returns all negated specPreds of predicate PRED (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-NOT-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-ALL-NOT-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-NOT-SPEC-INVERSES "ALL-NOT-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-NOT-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-NOT-SPEC-INVERSES " Returns all predicates having PRED as a negated genlInverse (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-NOT-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-SPEC-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-PREDICATEqm "SPEC-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-PREDICATEqm " Is GENL a genlPred of SPEC? (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-PREDICATEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-PREDICATEqm "GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-PREDICATEqm " Is GENL a genlPred of SPEC? (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-PREDICATEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-INVERSEqm")
(cyc-assert '(#$isa #$SubLFunction-GENL-INVERSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-INVERSEqm "GENL-INVERSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-INVERSEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-INVERSEqm " Is GENL a genlInverse of SPEC? (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-INVERSEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-INVERSEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-INVERSEqm")
(cyc-assert '(#$isa #$SubLFunction-SPEC-INVERSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-INVERSEqm "SPEC-INVERSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-INVERSEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-INVERSEqm " Is GENL a genlInverse of SPEC? (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-INVERSEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-INVERSEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-GENL-PREDICATEqm "ANY-GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-GENL-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-GENL-PREDICATEqm " Returns T iff (genl-predicate? SPEC GENL) for some genl in GENLS (ascending transitive search; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-GENL-PREDICATEqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-NOT-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-GENL-PREDICATEqm "NOT-GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-GENL-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-GENL-PREDICATEqm " Is NOT-GENL knwon to be not a genlPred of SPEC? (descending transitive search; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-PREDICATEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-GENL-INVERSEqm")
(cyc-assert '(#$isa #$SubLFunction-NOT-GENL-INVERSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-GENL-INVERSEqm "NOT-GENL-INVERSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-GENL-INVERSEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-GENL-INVERSEqm " Is NOT-GENL a negated genlInverse of SPEC? (descending transitive search; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-INVERSEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-INVERSEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ANY-NOT-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-ANY-NOT-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ANY-NOT-GENL-PREDICATEqm "ANY-NOT-GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ANY-NOT-GENL-PREDICATEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ANY-NOT-GENL-PREDICATEqm " Is any predicate in NOT-GENLS not a genlPred of PRED? (descending transitive search; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-NOT-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ANY-NOT-GENL-PREDICATEqm 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-INTERSECTING-PREDICATESqm")
(cyc-assert '(#$isa #$SubLFunction-INTERSECTING-PREDICATESqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTERSECTING-PREDICATESqm "INTERSECTING-PREDICATES?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-INTERSECTING-PREDICATESqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-INTERSECTING-PREDICATESqm " Does the extension of PRED1 include some tuple in the extension of PRED2? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-INTERSECTING-PREDICATESqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-INTERSECTING-PREDICATESqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-GENL-PREDICATEqm "WHY-GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-GENL-PREDICATEqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-GENL-PREDICATEqm " A justification of (genlPreds SPEC GENL) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENL-PREDICATEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-NOT-GENL-PREDICATEqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-NOT-GENL-PREDICATEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-NOT-GENL-PREDICATEqm "WHY-NOT-GENL-PREDICATE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-NOT-GENL-PREDICATEqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-NOT-GENL-PREDICATEqm " A justification of (not (genlPreds SPEC GENL)) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENL-PREDICATEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENL-PREDICATEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-GENL-INVERSEqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-GENL-INVERSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-GENL-INVERSEqm "WHY-GENL-INVERSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-GENL-INVERSEqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-GENL-INVERSEqm " A justification of (genlInverse PRED GENL-INVERSE) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENL-INVERSEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-GENL-INVERSEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-WHY-NOT-GENL-INVERSEqm")
(cyc-assert '(#$isa #$SubLFunction-WHY-NOT-GENL-INVERSEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-WHY-NOT-GENL-INVERSEqm "WHY-NOT-GENL-INVERSE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-WHY-NOT-GENL-INVERSEqm #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-WHY-NOT-GENL-INVERSEqm " A justification of (not (genlInverse SPEC GENL) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENL-INVERSEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-WHY-NOT-GENL-INVERSEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MIN-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-PREDICATES "MIN-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-PREDICATES " Returns the most-specific predicates in PREDS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MAX-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-PREDICATES "MAX-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-PREDICATES " Returns the most-specific predicates in PREDS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-CEILING-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MIN-CEILING-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-CEILING-PREDICATES "MIN-CEILING-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-CEILING-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-CEILING-PREDICATES " Returns the most-specific common generalizations (ceilings) of PREDS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-CEILING-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-PREDICATES "MAX-FLOOR-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MAX-FLOOR-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-PREDICATES " Returns the most-general common specializations (floors) of PREDS ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS "MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS " @return listp; In what (most-genl) mts is GENL a genlPred of SPEC? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-PREDICATE-PATHS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS")
(cyc-assert '(#$isa #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS "MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS " In what (most-genl) mts is GENL-INVERSE a genlInverse of SPEC? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAX-FLOOR-MTS-OF-GENL-INVERSE-PATHS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-GENL-PREDS")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-GENL-PREDS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-GENL-PREDS "MAP-ALL-GENL-PREDS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-GENL-PREDS " Apply FN to each genlPred of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-GENL-PREDS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-GENL-PREDS 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-ALL-GENL-PREDS")
(cyc-assert '(#$isa #$SubLFunction-SOME-ALL-GENL-PREDS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-ALL-GENL-PREDS "SOME-ALL-GENL-PREDS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-ALL-GENL-PREDS " Apply FN to each genlPred of PRED until FN returns a non-nil result ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-GENL-PREDS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-GENL-PREDS 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MAP-ALL-SPEC-PREDS")
(cyc-assert '(#$isa #$SubLFunction-MAP-ALL-SPEC-PREDS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MAP-ALL-SPEC-PREDS "MAP-ALL-SPEC-PREDS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MAP-ALL-SPEC-PREDS " Apply FN to each genlPred of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-SPEC-PREDS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MAP-ALL-SPEC-PREDS 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-ALL-SPEC-PREDS")
(cyc-assert '(#$isa #$SubLFunction-SOME-ALL-SPEC-PREDS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-ALL-SPEC-PREDS "SOME-ALL-SPEC-PREDS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-ALL-SPEC-PREDS " Apply FN to each genlPred of PRED until FN returns a non-nil result ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-SPEC-PREDS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-SPEC-PREDS 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-PREDS-AMONG")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-PREDS-AMONG #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-PREDS-AMONG "ALL-GENL-PREDS-AMONG") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-PREDS-AMONG #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-PREDS-AMONG " Returns those genlPreds of PRED that are included among CANDIDATEs ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-PREDS-AMONG 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-PREDS-AMONG 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-PREDICATES "GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-PREDICATES " Returns the local genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GENL-INVERSES "GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GENL-INVERSES " Returns the local genlInverses of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-NOT-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-GENL-INVERSES "NOT-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-GENL-INVERSES " Returns the local negated genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-NOT-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-GENL-PREDICATES "NOT-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-GENL-PREDICATES " Returns the local negated genlPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-GENL-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-NOT-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-SPEC-INVERSES "NOT-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-SPEC-INVERSES " Returns the most-specific negated specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-NOT-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-NOT-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NOT-SPEC-PREDICATES "NOT-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-NOT-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-NOT-SPEC-PREDICATES " Returns the negated specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-NOT-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SOME-ALL-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-SOME-ALL-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SOME-ALL-GENL-INVERSES "SOME-ALL-GENL-INVERSES") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SOME-ALL-GENL-INVERSES " Apply FN to each genlPred of PRED until FN returns a non-nil result ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-GENL-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SOME-ALL-GENL-INVERSES 2 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-INVERSES "SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-INVERSES " Returns the specInverses of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-INVERSES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-SPEC-PREDICATES "SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-SPEC-PREDICATES " Returns the specPreds of PRED ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-SPEC-PREDICATES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-GENL-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-GENL-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-GENL-INVERSES "UNION-ALL-GENL-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-GENL-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-GENL-INVERSES " Returns all genl-inverses of each collection in Preds ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-GENL-INVERSES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-GENL-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-GENL-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-GENL-PREDICATES "UNION-ALL-GENL-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-GENL-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-GENL-PREDICATES " Returns all genl-predicates of each collection in Preds ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-GENL-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-SPEC-INVERSES")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-SPEC-INVERSES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-SPEC-INVERSES "UNION-ALL-SPEC-INVERSES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-SPEC-INVERSES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-SPEC-INVERSES " Returns all specs of each collection in Preds ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-SPEC-INVERSES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-UNION-ALL-SPEC-PREDICATES")
(cyc-assert '(#$isa #$SubLFunction-UNION-ALL-SPEC-PREDICATES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-UNION-ALL-SPEC-PREDICATES "UNION-ALL-SPEC-PREDICATES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-UNION-ALL-SPEC-PREDICATES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-UNION-ALL-SPEC-PREDICATES " Returns all spec-predicates of each collection in Preds ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-UNION-ALL-SPEC-PREDICATES 1 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ALL-ACCESSIBLE")
(cyc-assert '(#$isa #$SubLFunction-GT-ALL-ACCESSIBLE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ALL-ACCESSIBLE "GT-ALL-ACCESSIBLE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ALL-ACCESSIBLE #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ALL-ACCESSIBLE " Returns all superiors and all inferiors of FORT via PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-ACCESSIBLE 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-ACCESSIBLE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ALL-DEPENDENT-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS "GT-ALL-DEPENDENT-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS " Returns all inferiors i of FORT s.t. every path connecting i to any superior of FORT must pass through FORT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-DEPENDENT-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ALL-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-ALL-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ALL-INFERIORS "GT-ALL-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ALL-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ALL-INFERIORS " Returns all inferiors of FORT via PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ALL-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-ALL-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ALL-SUPERIORS "GT-ALL-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ALL-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ALL-SUPERIORS " Returns all superiors of FORT via PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ALL-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ANY-SUPERIOR-PATH")
(cyc-assert '(#$isa #$SubLFunction-GT-ANY-SUPERIOR-PATH #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ANY-SUPERIOR-PATH "GT-ANY-SUPERIOR-PATH") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ANY-SUPERIOR-PATH #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ANY-SUPERIOR-PATH " Returns list of nodes connecting INFERIOR with SUPERIOR ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ANY-SUPERIOR-PATH 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ANY-SUPERIOR-PATH 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ANY-SUPERIOR-PATH 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-CO-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-CO-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-CO-INFERIORS "GT-CO-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-CO-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-CO-INFERIORS " Returns sibling direct-inferiors of direct-superiors of FORT via PREDICATE, excluding FORT itself ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CO-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CO-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-CO-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-CO-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-CO-SUPERIORS "GT-CO-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-CO-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-CO-SUPERIORS " Returns sibling direct-superiors of direct-inferiors of FORT via PREDICATE, excluding FORT itself ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CO-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CO-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-COMPLETES-CYCLEqm")
(cyc-assert '(#$isa #$SubLFunction-GT-COMPLETES-CYCLEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-COMPLETES-CYCLEqm "GT-COMPLETES-CYCLE?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-COMPLETES-CYCLEqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-COMPLETES-CYCLEqm " Returns whether a transitive path connect FORT2 to FORT1, or whether a transitive inverse path connect FORT1 to FORT2? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPLETES-CYCLEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPLETES-CYCLEqm 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPLETES-CYCLEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS "GT-COMPOSE-FN-ALL-INFERIORS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS " Apply fn to each inferior of FORT; fn takes a fort as its only arg, and it must not effect the search status of each fort it visits ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS 3 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS "GT-COMPOSE-FN-ALL-SUPERIORS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS " Apply fn to each superior of FORT; fn takes a fort as its only arg, and must not effect the search status of each fort it visits ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS 3 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-FN-ALL-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS "GT-COMPOSE-PRED-ALL-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS " Returns all nodes accessible by COMPOSE-PRED from each inferior of FORT along transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-PREDICATE-IN-ANY-MTqm")
(cyc-assert '(#$isa #$SubLFunction-PREDICATE-IN-ANY-MTqm #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS 3 #$SubLFunction-PREDICATE-IN-ANY-MTqm) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PREDICATE-IN-ANY-MTqm "PREDICATE-IN-ANY-MT?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS "GT-COMPOSE-PRED-ALL-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS " Returns all nodes accessible by COMPOSE-PRED from each superior of FORT along transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-PREDICATE-IN-ANY-MTqm")
(cyc-assert '(#$isa #$SubLFunction-PREDICATE-IN-ANY-MTqm #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS 3 #$SubLFunction-PREDICATE-IN-ANY-MTqm) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-PREDICATE-IN-ANY-MTqm "PREDICATE-IN-ANY-MT?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-COMPOSE-PRED-ALL-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-CYCLESqm")
(cyc-assert '(#$isa #$SubLFunction-GT-CYCLESqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-CYCLESqm "GT-CYCLES?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-CYCLESqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-CYCLESqm " Returns whether FORT is accessible from itself by one or more PREDICATE gafs? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CYCLESqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-CYCLESqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-HAS-INFERIORqm")
(cyc-assert '(#$isa #$SubLFunction-GT-HAS-INFERIORqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-HAS-INFERIORqm "GT-HAS-INFERIOR?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-HAS-INFERIORqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-HAS-INFERIORqm " Returns whether fort SUPERIOR is hierarchically higher (wrt transitive PREDICATE) to fort INFERIOR? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-INFERIORqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-INFERIORqm 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-INFERIORqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-HAS-SUPERIORqm")
(cyc-assert '(#$isa #$SubLFunction-GT-HAS-SUPERIORqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-HAS-SUPERIORqm "GT-HAS-SUPERIOR?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-HAS-SUPERIORqm #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-HAS-SUPERIORqm " Returns whetherfort INFERIOR is hierarchically lower (wrt transitive PREDICATE) to fort SUPERIOR? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-SUPERIORqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-SUPERIORqm 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-HAS-SUPERIORqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-INFERIORS "GT-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-INFERIORS " Returns direct inferiors of FORT via transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-LEAVES")
(cyc-assert '(#$isa #$SubLFunction-GT-LEAVES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-LEAVES "GT-LEAVES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-LEAVES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-LEAVES " Returns minimal inferiors (i.e., leaves) of FORT via PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-LEAVES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-LEAVES 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MAX-FLOORS")
(cyc-assert '(#$isa #$SubLFunction-GT-MAX-FLOORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MAX-FLOORS "GT-MAX-FLOORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MAX-FLOORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MAX-FLOORS " Returns the least-subordinate elements or common inferiors of FORTS (when CANDIDATES is non-nil, the result must subset it) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-FLOORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-FLOORS 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MAX-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-MAX-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MAX-INFERIORS "GT-MAX-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MAX-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MAX-INFERIORS " Returns maximal inferiors of FORT via transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MAX-INFERIORS-EXCLUDING")
(cyc-assert '(#$isa #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING "GT-MAX-INFERIORS-EXCLUDING") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING " Returns most-general inferiors of SUPERIOR ignoring INFERIOR (expensive) (useful for splicing-out INFERIOR from hierarchy) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-INFERIORS-EXCLUDING 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MAX-NODES")
(cyc-assert '(#$isa #$SubLFunction-GT-MAX-NODES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MAX-NODES "GT-MAX-NODES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MAX-NODES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MAX-NODES " Returns returns the least-subordinate elements of FORTS (<direction> should be :up unless all nodes are low in the hierarchy) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-NODES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MAX-NODES 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MIN-CEILINGS")
(cyc-assert '(#$isa #$SubLFunction-GT-MIN-CEILINGS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MIN-CEILINGS "GT-MIN-CEILINGS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MIN-CEILINGS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MIN-CEILINGS " Returns the most-subordinate common superiors of FORTS (when CANDIDATES is non-nil, the result must subset it) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-CEILINGS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-CEILINGS 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MIN-NODES")
(cyc-assert '(#$isa #$SubLFunction-GT-MIN-NODES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MIN-NODES "GT-MIN-NODES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MIN-NODES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MIN-NODES " Returns returns the most-subordinate elements of FORTS (one member only of a cycle will be a min-node candidate) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-NODES 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LISTP")
(cyc-assert '(#$isa #$SubLFunction-LISTP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-NODES 2 #$SubLFunction-LISTP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LISTP "LISTP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MIN-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-MIN-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MIN-SUPERIORS "GT-MIN-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MIN-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MIN-SUPERIORS " Returns minimal superiors of FORT via transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-MIN-SUPERIORS-EXCLUDING")
(cyc-assert '(#$isa #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING "GT-MIN-SUPERIORS-EXCLUDING") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING " Returns least-general superiors of INFERIOR ignoring SUPERIOR (useful for splicing-out SUPERIOR from hierarchy) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-MIN-SUPERIORS-EXCLUDING 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-REDUNDANT-INFERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-REDUNDANT-INFERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-REDUNDANT-INFERIORS "GT-REDUNDANT-INFERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-REDUNDANT-INFERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-REDUNDANT-INFERIORS " Returns direct-inferiors of FORT via PREDICATE that subsumed other inferiors ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-REDUNDANT-INFERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-REDUNDANT-INFERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-REDUNDANT-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-REDUNDANT-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-REDUNDANT-SUPERIORS "GT-REDUNDANT-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-REDUNDANT-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-REDUNDANT-SUPERIORS " Returns direct-superiors of FORT via PREDICATE that are subsumed by other superiors ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-REDUNDANT-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-REDUNDANT-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-ROOTS")
(cyc-assert '(#$isa #$SubLFunction-GT-ROOTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-ROOTS "GT-ROOTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-ROOTS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-ROOTS " Returns maximal superiors (i.e., roots) of FORT via PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ROOTS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-ROOTS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-SUPERIORS")
(cyc-assert '(#$isa #$SubLFunction-GT-SUPERIORS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-SUPERIORS "GT-SUPERIORS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-SUPERIORS #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-SUPERIORS " Returns direct superiors of FORT via transitive PREDICATE ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-SUPERIORS 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-SUPERIORS 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-WHY-COMPLETES-CYCLEqm")
(cyc-assert '(#$isa #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm "GT-WHY-COMPLETES-CYCLE?") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm " Returns justification that a transitive path connects FORT2 to FORT1, or that a transitive inverse path connects FORT1 to FORT2? ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-COMPLETES-CYCLEqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-GT-WHY-SUPERIORqm")
(cyc-assert '(#$isa #$SubLFunction-GT-WHY-SUPERIORqm #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-GT-WHY-SUPERIORqm "GT-WHY-SUPERIOR?") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERTION-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERTION-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-GT-WHY-SUPERIORqm #$SubLFunction-ASSERTION-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-GT-WHY-SUPERIORqm " Returns justification of why SUPERIOR is superior to (i.e., hierarchically higher than) INFERIOR ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-SUPERIORqm 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-SUPERIORqm 3 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-GT-WHY-SUPERIORqm 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-ATTRIBUTES")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-ATTRIBUTES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-ATTRIBUTES "ALL-GENL-ATTRIBUTES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-ATTRIBUTES " Returns all genl-attributes of attribute ATT (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-ATTRIBUTES-IF")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-ATTRIBUTES-IF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-ATTRIBUTES-IF "ALL-GENL-ATTRIBUTES-IF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-IF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-ATTRIBUTES-IF " Returns all genl-attributes of attribute ATT that satisfy FUNCTION (FUNCTION must not effect sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-IF 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-IF 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-GENL-ATTRIBUTES-WRT")
(cyc-assert '(#$isa #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT "ALL-GENL-ATTRIBUTES-WRT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT " Returns all genl-attributes of attribute SPEC that are also specs of attribute GENL (ascending transitive closure; inexpensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-GENL-ATTRIBUTES-WRT 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-GENL-ATTRIBUTE")
(cyc-assert '(#$isa #$SubLFunction-ARGN-GENL-ATTRIBUTE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-GENL-ATTRIBUTE "ARGN-GENL-ATTRIBUTE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INDEXED-TERM-P")
(cyc-assert '(#$isa #$SubLFunction-INDEXED-TERM-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGN-GENL-ATTRIBUTE #$SubLFunction-INDEXED-TERM-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-GENL-ATTRIBUTE " Returns the local genl-attribute constraints applied to the Nth argument of RELATION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-GENL-ATTRIBUTE 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ARGN-GENL-ATTRIBUTE-OF")
(cyc-assert '(#$isa #$SubLFunction-ARGN-GENL-ATTRIBUTE-OF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ARGN-GENL-ATTRIBUTE-OF "ARGN-GENL-ATTRIBUTE-OF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ARGN-GENL-ATTRIBUTE-OF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ARGN-GENL-ATTRIBUTE-OF " Returns a list of the predicates for which COLLECTION is a local genl-attribute constraint applied to the Nth argument. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ARGN-GENL-ATTRIBUTE-OF 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-MIN-ARGN-GENL-ATTRIBUTE")
(cyc-assert '(#$isa #$SubLFunction-MIN-ARGN-GENL-ATTRIBUTE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-MIN-ARGN-GENL-ATTRIBUTE "MIN-ARGN-GENL-ATTRIBUTE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-MIN-ARGN-GENL-ATTRIBUTE #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-MIN-ARGN-GENL-ATTRIBUTE " Return a list of the most specific local genl-attribute constraints applicable to the argument N of RELATION. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-INTEGERP")
(cyc-assert '(#$isa #$SubLFunction-INTEGERP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-MIN-ARGN-GENL-ATTRIBUTE 1 #$SubLFunction-INTEGERP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-INTEGERP "INTEGERP") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-ATTRIBUTES")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-ATTRIBUTES #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-ATTRIBUTES "ALL-SPEC-ATTRIBUTES") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-ATTRIBUTES #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-ATTRIBUTES " Returns all spec-attributes of attribute ATT (descending transitive closure; expensive) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-ATTRIBUTES 1 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-ALL-SPEC-ATTRIBUTES-IF")
(cyc-assert '(#$isa #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF "ALL-SPEC-ATTRIBUTES-IF") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF " Returns all genl-attributes of attribute ATT that satisfy FUNCTION (FUNCTION must not effect sbhl search state) ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FUNCTION-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-FUNCTION-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF 1 #$SubLFunction-FUNCTION-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FUNCTION-SPEC-P "FUNCTION-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-EL-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-EL-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-ALL-SPEC-ATTRIBUTES-IF 2 #$SubLFunction-EL-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-EL-FORT-P "EL-FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-FIND")
(cyc-assert '(#$isa #$SubLFunction-FI-FIND #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-FIND "FI-FIND") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-FIND " Return the constant indentified by the string NAME. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-COMPLETE")
(cyc-assert '(#$isa #$SubLFunction-FI-COMPLETE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-COMPLETE "FI-COMPLETE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-COMPLETE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-COMPLETE " Return a list of constants whose name begins with PREFIX. The comparison is performed in a case-insensitive mode unless CASE-SENSITIVE? is non-nil. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-CREATE")
(cyc-assert '(#$isa #$SubLFunction-FI-CREATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-CREATE "FI-CREATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-CREATE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-CREATE " Create a new constant with NAME. If EXTERNAL-ID is non-null it is used, otherwise a unique identifier is generated. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-FIND-OR-CREATE")
(cyc-assert '(#$isa #$SubLFunction-FI-FIND-OR-CREATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-FIND-OR-CREATE "FI-FIND-OR-CREATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-FIND-OR-CREATE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-FIND-OR-CREATE " Return constant with NAME if it is present. If not present, then create constant with NAME, using EXTERNAL-ID if given. If EXTERNAL-ID is not given, generate a new one for the new constant. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-KILL")
(cyc-assert '(#$isa #$SubLFunction-FI-KILL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-KILL "FI-KILL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-KILL #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-KILL " Kill FORT and all its uses from the KB. If FORT is a microtheory, all assertions in that microtheory are removed. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-RENAME")
(cyc-assert '(#$isa #$SubLFunction-FI-RENAME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-RENAME "FI-RENAME") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-RENAME " Change name of CONSTANT to NAME. Return the constant if no error, otherwise return NIL. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-LOOKUP")
(cyc-assert '(#$isa #$SubLFunction-FI-LOOKUP #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-LOOKUP "FI-LOOKUP") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-LOOKUP " Returns two values when looking up the EL FORMULA in the microtheory MT. The first value returned is a list of HL formulas resulting from the canonicalization of the EL FORMULA. The second value is T iff all the HL assertions were properly put into the KB. Value 1 returned is a list of elements satisfying CONSP. Value 2 returned satisfies BOOLEANP ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-ASSERT")
(cyc-assert '(#$isa #$SubLFunction-FI-ASSERT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-ASSERT "FI-ASSERT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-ASSERT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-ASSERT " Assert the FORMULA in the specified MT. STRENGTH is :default or :monotonic. DIRECTION is :forward or :backward. GAF assertion direction defaults to :forward, and rule assertion direction defaults to :backward. Return T if there was no error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-UNASSERT")
(cyc-assert '(#$isa #$SubLFunction-FI-UNASSERT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-UNASSERT "FI-UNASSERT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-UNASSERT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-UNASSERT " Remove the assertions canonicalized from FORMULA in the microtheory MT. Return T if the operation succeeded, otherwise return NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-EDIT")
(cyc-assert '(#$isa #$SubLFunction-FI-EDIT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-EDIT "FI-EDIT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-EDIT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-EDIT " Unassert the assertions canonicalized from OLD-FORMULA in the microtheory OLD-MT. Assert NEW-FORMULA in the specified NEW-MT. STRENGTH is :default or :monotonic. DIRECTION is :forward or :backward. GAF assertion direction defaults to :forward. Rule assertion direction defaults to :backward. Return T if there was no error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-BLAST")
(cyc-assert '(#$isa #$SubLFunction-FI-BLAST #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-BLAST "FI-BLAST") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-BLAST #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-BLAST " Remove all arguments for the FORMULA within MT, including both those arguments resulting the direct assertion of the FORMULA, and those arguments supporting the FORMULA which were derived through inference. Return T if successful, otherwise return NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-ASK")
(cyc-assert '(#$isa #$SubLFunction-FI-ASK #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-ASK "FI-ASK") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-ASK " Ask for bindings for free variables which will satisfy FORMULA within MT. If BACKCHAIN is NIL, no inference is performed. If BACKCHAIN is an integer, then at most that many backchaining steps using rules are performed. If BACKCHAIN is T, then inference is performed without limit on the number of backchaining steps when searching for bindings. If NUMBER is an integer, then at most that number of bindings are returned. If TIME is an integer, then at most TIME seconds are consumed by the search for bindings. If DEPTH is an integer, then the inference paths are limited to that number of total steps. Returns NIL if the operation had an error. Otherwise returns a list of variable/ binding pairs. In the case where the FORMULA has no free variables, the form (((T . T))) is returned indicating that the gaf is either directly asserted in the KB, or that it can be derived via rules in the KB. Single value returned satisfies LISTP or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-CONTINUE-LAST-ASK")
(cyc-assert '(#$isa #$SubLFunction-FI-CONTINUE-LAST-ASK #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-CONTINUE-LAST-ASK "FI-CONTINUE-LAST-ASK") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-CONTINUE-LAST-ASK " Continue the last ask that was performed with more resources. If BACKCHAIN is NIL, no inference is performed. If BACKCHAIN is an integer, then at most that many backchaining steps using rules are performed. If BACKCHAIN is T, then inference is performed without limit on the number of backchaining steps when searching for bindings. If NUMBER is an integer, then at most that number of bindings are returned. If TIME is an integer, then at most TIME seconds are consumed by the search for bindings. If DEPTH is an integer, then the inference paths are limited to that number of total steps. Returns NIL if the operation had an error. Otherwise returns a list of variable/ binding pairs. In the case where the FORMULA has no free variables, the form (((T . T))) is returned indicating that the gaf is either directly asserted in the KB, or that it can be derived via rules in the KB. Single value returned satisfies LISTP or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-ASK-STATUS")
(cyc-assert '(#$isa #$SubLFunction-FI-ASK-STATUS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-ASK-STATUS "FI-ASK-STATUS") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-ASK-STATUS " Return a status as to how the last ask successfully completed regarding resource limits. :EXHAUST if the search spaces was exhausted. :DEPTH if the search space was limited because some nodes were too deep. :NUMBER if the requested number of bindings was found without exceeding other limits. :TIME if the time alloted expired prior to exhausting the search space. Return NIL if there was no prior successful ask. Single value returned satisfies ATOM or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-TMS-RECONSIDER-FORMULA")
(cyc-assert '(#$isa #$SubLFunction-FI-TMS-RECONSIDER-FORMULA #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-TMS-RECONSIDER-FORMULA "FI-TMS-RECONSIDER-FORMULA") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-TMS-RECONSIDER-FORMULA #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-TMS-RECONSIDER-FORMULA " Reconsider all arguments for FORMULA within MT. Return T if the operation succeeded, NIL if there was an error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-TMS-RECONSIDER-MT")
(cyc-assert '(#$isa #$SubLFunction-FI-TMS-RECONSIDER-MT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-TMS-RECONSIDER-MT "FI-TMS-RECONSIDER-MT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-TMS-RECONSIDER-MT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-TMS-RECONSIDER-MT " Reconsider all arguments for all formulas within MT. Return T if the operation succeeded, NIL if there was an error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-TMS-RECONSIDER-GAFS")
(cyc-assert '(#$isa #$SubLFunction-FI-TMS-RECONSIDER-GAFS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-TMS-RECONSIDER-GAFS "FI-TMS-RECONSIDER-GAFS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-TMS-RECONSIDER-GAFS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-TMS-RECONSIDER-GAFS " Reconsider all arguments for all gaf formulas involving TERM. ARG optionally constrains gafs such that the TERM occupies a specific arg position. PREDICATE optionally constrains gafs such that the specifed PREDICATE occupies the arg0 position. MT optionally constrains gafs such that they must be included in the specific microtheory. Return T if the operation succeeded, NIL if there was an error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-TMS-RECONSIDER-TERM")
(cyc-assert '(#$isa #$SubLFunction-FI-TMS-RECONSIDER-TERM #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-TMS-RECONSIDER-TERM "FI-TMS-RECONSIDER-TERM") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-FI-TMS-RECONSIDER-TERM #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-TMS-RECONSIDER-TERM " Reconsider all arguments involving TERM. If MT is provided, then only arguments in that microtheory are reconsidered. Return T if the operation succeeded, NIL if there was an error. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-HYPOTHESIZE")
(cyc-assert '(#$isa #$SubLFunction-FI-HYPOTHESIZE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-HYPOTHESIZE "FI-HYPOTHESIZE") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-HYPOTHESIZE " Cyc attempts to check if FORMULA is satisfiable in MT by 'hypothesizing' constants for the variables in FORMULA, substituting them into FORMULA, and asserting the new formula in MT. If this would trigger a contradiction, then NIL is returned. Otherwise a binding list of variable / constant pairs is returned, indicating the constants which were successfully 'hypothesized'. The form (((T . T))) is returned if no new terms required creation for the assertion of FORMULA. NAME-PREFIX is a string which is used as a prefix for the name of each new constant hypothesized. TERM-IDS is a list of variable / id pairs indicating that the specified id should be used when generating the constant for the variable in FORMULA. If TERM-IDS is NIL, then unused ids are allocated for the new constants. Single value returned satisfies LISTP or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-PROVE")
(cyc-assert '(#$isa #$SubLFunction-FI-PROVE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-PROVE "FI-PROVE") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-PROVE " Attempts to prove FORMULA is true in MT under the given resource constraints. BACKCHAIN, NUMBER, TIME and DEPTH function as described for FI-ASK. FORMULA is interpreted as follows: If FORMULA is of the form (#$implies [antecedant] [consequent]) then (1) free variables in [antecedant] are assumed to be universally quantified (2) remaining variables in [consequent] are assumed to be existentially quantified. Otherwise FORMULA is interpreted as (#$implies #$True FORMULA) and handled as the case above. It returns NIL or a list of arguments as described for FI-JUSTIFY. Single value returned satisfies (LIST LISTP) or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-GET-ERROR")
(cyc-assert '(#$isa #$SubLFunction-FI-GET-ERROR #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-GET-ERROR "FI-GET-ERROR") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-GET-ERROR " Return a description of the error resulting from the last FI operation. Single value returned satisfies ATOM or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-FI-GET-WARNING")
(cyc-assert '(#$isa #$SubLFunction-FI-GET-WARNING #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FI-GET-WARNING "FI-GET-WARNING") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-FI-GET-WARNING " Return a description of the warning resulting from the last FI operation. Single value returned satisfies ATOM or is NIL. ") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-FIND-OR-CREATE")
(cyc-assert '(#$isa #$SubLFunction-CYC-FIND-OR-CREATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-FIND-OR-CREATE "CYC-FIND-OR-CREATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-FIND-OR-CREATE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-FIND-OR-CREATE " Return constant with NAME if it is present. If not present, then create constant with NAME, using EXTERNAL-ID if given. If EXTERNAL-ID is not given, generate a new one for the new constant. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-VALID-CONSTANT-NAME")
(cyc-assert '(#$isa #$SubLFunction-VALID-CONSTANT-NAME #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-FIND-OR-CREATE 1 #$SubLFunction-VALID-CONSTANT-NAME) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VALID-CONSTANT-NAME "VALID-CONSTANT-NAME") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-FIND-OR-CREATE 2 #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P "(NIL-OR CONSTANT-EXTERNAL-ID-P)") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-CREATE")
(cyc-assert '(#$isa #$SubLFunction-CYC-CREATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-CREATE "CYC-CREATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-CREATE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-CREATE " Create a new constant with id EXTERNAL-ID. If NAME is anything other than :unnamed, the new constant will be given the name NAME. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NEW-CONSTANT-NAME-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CREATE 1 #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P "NEW-CONSTANT-NAME-SPEC-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CREATE 2 #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-CONSTANT-EXTERNAL-ID-P "(NIL-OR CONSTANT-EXTERNAL-ID-P)") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-CREATE-NEW-EPHEMERAL")
(cyc-assert '(#$isa #$SubLFunction-CYC-CREATE-NEW-EPHEMERAL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-CREATE-NEW-EPHEMERAL "CYC-CREATE-NEW-EPHEMERAL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-CREATE-NEW-EPHEMERAL #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-CREATE-NEW-EPHEMERAL " Creates a new constant with name NAME, but makes no effort to synchronize its external ID with other Cyc images. This is intended for constants that will not be transmitted to other Cyc images. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NEW-CONSTANT-NAME-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CREATE-NEW-EPHEMERAL 1 #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P "NEW-CONSTANT-NAME-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-CREATE-NEW-PERMANENT")
(cyc-assert '(#$isa #$SubLFunction-CYC-CREATE-NEW-PERMANENT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-CREATE-NEW-PERMANENT "CYC-CREATE-NEW-PERMANENT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-CREATE-NEW-PERMANENT #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-CREATE-NEW-PERMANENT " Creates a new constant with name NAME, gives it a permanent unique external ID, and adds the constant creation operation to the transcript queue. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NEW-CONSTANT-NAME-SPEC-P")
(cyc-assert '(#$isa #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CREATE-NEW-PERMANENT 1 #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NEW-CONSTANT-NAME-SPEC-P "NEW-CONSTANT-NAME-SPEC-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-KILL")
(cyc-assert '(#$isa #$SubLFunction-CYC-KILL #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-KILL "CYC-KILL") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-KILL #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-KILL " Kill FORT and all its uses from the KB. If FORT is a microtheory, all assertions in that microtheory are removed. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-KILL 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-RECREATE")
(cyc-assert '(#$isa #$SubLFunction-CYC-RECREATE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-RECREATE "CYC-RECREATE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-RECREATE #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-RECREATE " Doesn't unassert the bookkeeping info, but it might actually move it, or change its format somehow. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-RECREATE 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-RENAME")
(cyc-assert '(#$isa #$SubLFunction-CYC-RENAME #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-RENAME "CYC-RENAME") #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-RENAME " Change name of CONSTANT to NAME. Return the constant if no error, otherwise return NIL. Single value returned satisfies CONSTANT-P or is NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-CONSTANT-P")
(cyc-assert '(#$isa #$SubLFunction-CONSTANT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-RENAME 1 #$SubLFunction-CONSTANT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CONSTANT-P "CONSTANT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-VALID-CONSTANT-NAME")
(cyc-assert '(#$isa #$SubLFunction-VALID-CONSTANT-NAME #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-RENAME 2 #$SubLFunction-VALID-CONSTANT-NAME) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-VALID-CONSTANT-NAME "VALID-CONSTANT-NAME") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-MERGE")
(cyc-assert '(#$isa #$SubLFunction-CYC-MERGE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-MERGE "CYC-MERGE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-MERGE #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-MERGE " Move asserted assertions on KILL-TERM onto KEEP-TERM before killing KILL-TERM. @return fort-p; KEEP-FORT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-MERGE 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-MERGE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-ASSERT")
(cyc-assert '(#$isa #$SubLFunction-CYC-ASSERT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-ASSERT "CYC-ASSERT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-ASSERT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-ASSERT " Assert SENTENCE in the specified MT. properties; :strength el-strength-p (:default or :monotonic) :direction direction-p (:forward or :backward) GAF assertion direction defaults to :forward, and rule assertion direction defaults to :backward. @return booleanp; t iff the assert succeeded. If the assertion already existed, it is considered a success. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ASSERT 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERT-PROPERTIES-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERT-PROPERTIES-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ASSERT 3 #$SubLFunction-ASSERT-PROPERTIES-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERT-PROPERTIES-P "ASSERT-PROPERTIES-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-ASSERT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ASSERT 2 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-ASSERT 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-UNASSERT")
(cyc-assert '(#$isa #$SubLFunction-CYC-UNASSERT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-UNASSERT "CYC-UNASSERT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-UNASSERT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-UNASSERT " Remove the assertions canonicalized from FORMULA in the microtheory MT. Return T if the operation succeeded, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-UNASSERT 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-UNASSERT 2 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-UNASSERT 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-EDIT")
(cyc-assert '(#$isa #$SubLFunction-CYC-EDIT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-EDIT "CYC-EDIT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-EDIT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-EDIT " Unassert OLD-SENTENCE in OLD-MT, and assert NEW-SENTENCE in the specified NEW-MT. @see cyc-unassert and @xref cyc-assert ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-EDIT 4 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-EDIT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-EDIT 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-EDIT 3 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-EDIT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-EDIT 2 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-QUERY")
(cyc-assert '(#$isa #$SubLFunction-CYC-QUERY #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-QUERY "CYC-QUERY") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-QUERY-RESULTS-P")
(cyc-assert '(#$isa #$SubLFunction-QUERY-RESULTS-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-QUERY #$SubLFunction-QUERY-RESULTS-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-QUERY " Query for bindings for free variables which will satisfy SENTENCE within MT. ;;;{{{DOC Properties: :backchain NIL or an integer or T :number NIL or an integer :time NIL or an integer :depth NIL or an integer :conditional-sentence boolean If :backchain is NIL, no backchaining is performed. If :backchain is an integer, then at most that many backchaining steps using rules are performed. If :backchain is T, then inference is performed without limit on the number of backchaining steps when searching for bindings. If :number is an integer, then at most that number of bindings are returned. If :time is an integer, then at most that many seconds are consumed by the search for bindings. If :depth is an integer, then the inference paths are limited to that number of total steps. Returns NIL if the operation had an error. Otherwise returns a (possibly empty) binding set. In the case where the SENTENCE has no free variables, the form (NIL), the empty binding set is returned, indicating that the gaf is either directly asserted in the KB, or that it can be derived via rules in the KB. If it fails to be proven, NIL will be returned. The second return value indicates the reason why the query halted. If SENTENCE is an implication, or an ist wrapped around an implication, and the :conditional-sentence property is non-nil, cyc-query will attempt to prove SENTENCE by reductio ad absurdum. ;;;}}}EDOC ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-QUERY 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-QUERY-PROPERTIES-P")
(cyc-assert '(#$isa #$SubLFunction-QUERY-PROPERTIES-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-QUERY 3 #$SubLFunction-QUERY-PROPERTIES-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-QUERY-PROPERTIES-P "QUERY-PROPERTIES-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-QUERY 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-QUERY 2 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-QUERY 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-CONTINUE-QUERY")
(cyc-assert '(#$isa #$SubLFunction-CYC-CONTINUE-QUERY #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-CONTINUE-QUERY "CYC-CONTINUE-QUERY") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-QUERY-RESULTS-P")
(cyc-assert '(#$isa #$SubLFunction-QUERY-RESULTS-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-CONTINUE-QUERY #$SubLFunction-QUERY-RESULTS-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-CONTINUE-QUERY " Continues a query started by @xref cyc-query. If QUERY-ID is :last, the most recent query is continued. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-QUERY-ID-P")
(cyc-assert '(#$isa #$SubLFunction-QUERY-ID-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CONTINUE-QUERY 1 #$SubLFunction-QUERY-ID-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-QUERY-ID-P "QUERY-ID-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-CONTINUE-QUERY 1) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-QUERY-PROPERTIES-P")
(cyc-assert '(#$isa #$SubLFunction-QUERY-PROPERTIES-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-CONTINUE-QUERY 2 #$SubLFunction-QUERY-PROPERTIES-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-QUERY-PROPERTIES-P "QUERY-PROPERTIES-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-CONTINUE-QUERY 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-ADD-ARGUMENT")
(cyc-assert '(#$isa #$SubLFunction-CYC-ADD-ARGUMENT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-ADD-ARGUMENT "CYC-ADD-ARGUMENT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-ADD-ARGUMENT " Tell Cyc to conclude SENTENCE (optionally in MT) based on the list of CYCL-SUPPORTS which should themselves be assertions or otherwise valid for support-p. If VERIFY-SUPPORTS is non-nil, then this function will attempt to verify the list of supports before making the assertion. Properties: :direction :forward or :backward ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-ASSERT-PROPERTIES-P")
(cyc-assert '(#$isa #$SubLFunction-ASSERT-PROPERTIES-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT 4 #$SubLFunction-ASSERT-PROPERTIES-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-ASSERT-PROPERTIES-P "ASSERT-PROPERTIES-P") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-ADD-ARGUMENT 4) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT 3 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-ADD-ARGUMENT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LIST-OF-CYCL-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-LIST-OF-CYCL-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT 2 #$SubLFunction-LIST-OF-CYCL-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LIST-OF-CYCL-SUPPORT-P "LIST-OF-CYCL-SUPPORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-ADD-ARGUMENT 5 #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-BOOLEANP "BOOLEANP") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-ADD-ARGUMENT 5) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-REMOVE-ALL-ARGUMENTS")
(cyc-assert '(#$isa #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS "CYC-REMOVE-ALL-ARGUMENTS") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS " Remove all arguments for SENTENCE within MT, including both those arguments resulting the direct assertion of SENTENCE, and those arguments supporting SENTENCE which were derived through inference. Return T if successful, otherwise return NIL. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS 2 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-REMOVE-ALL-ARGUMENTS 2) #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-REMOVE-ARGUMENT")
(cyc-assert '(#$isa #$SubLFunction-CYC-REMOVE-ARGUMENT #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-REMOVE-ARGUMENT "CYC-REMOVE-ARGUMENT") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-REMOVE-ARGUMENT #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-REMOVE-ARGUMENT " Remove the argument for SENTENCE specified by CYCL-SUPPORTS. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REMOVE-ARGUMENT 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REMOVE-ARGUMENT 3 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-REMOVE-ARGUMENT 3) #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-LIST-OF-CYCL-SUPPORT-P")
(cyc-assert '(#$isa #$SubLFunction-LIST-OF-CYCL-SUPPORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REMOVE-ARGUMENT 2 #$SubLFunction-LIST-OF-CYCL-SUPPORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-LIST-OF-CYCL-SUPPORT-P "LIST-OF-CYCL-SUPPORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-REWRITE")
(cyc-assert '(#$isa #$SubLFunction-CYC-REWRITE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-REWRITE "CYC-REWRITE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-REWRITE #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-REWRITE " 'moves' all asserted arguments from SOURCE-FORT to TARGET-FORT @return fort-p; TARGET-FORT ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REWRITE 1 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-FORT-P")
(cyc-assert '(#$isa #$SubLFunction-FORT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-REWRITE 2 #$SubLFunction-FORT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-FORT-P "FORT-P") #$SubLMicrotheoryMt)

(find-or-create-constant "SubLFunction-CYC-TMS-RECONSIDER-SENTENCE")
(cyc-assert '(#$isa #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE #$SubLFunction) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE "CYC-TMS-RECONSIDER-SENTENCE") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-BOOLEANP")
(cyc-assert '(#$isa #$SubLFunction-BOOLEANP #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionReturnTypePredicate #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE #$SubLFunction-BOOLEANP) #$SubLMicrotheoryMt)
(cyc-assert '(#$comment #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE " Reconsider all arguments for SENTENCE within MT. Return T if the operation succeeded, NIL if there was an error. ") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-POSSIBLY-SENTENCE-P")
(cyc-assert '(#$isa #$SubLFunction-POSSIBLY-SENTENCE-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE 1 #$SubLFunction-POSSIBLY-SENTENCE-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-POSSIBLY-SENTENCE-P "POSSIBLY-SENTENCE-P") #$SubLMicrotheoryMt)
(find-or-create-constant "SubLFunction-NIL-OR-HLMT-P")
(cyc-assert '(#$isa #$SubLFunction-NIL-OR-HLMT-P #$SubLTypePredicate) #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionArgumentTypePredicate #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE 2 #$SubLFunction-NIL-OR-HLMT-P) #$SubLMicrotheoryMt)
(cyc-assert '(#$printedRepresentation #$SubLFunction-NIL-OR-HLMT-P "(NIL-OR HLMT-P)") #$SubLMicrotheoryMt)
(cyc-assert '(#$subLFunctionOptionalArgument #$SubLFunction-CYC-TMS-RECONSIDER-SENTENCE 2) #$SubLMicrotheoryMt)

